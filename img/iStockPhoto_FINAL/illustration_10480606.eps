%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 13.0.1%%For: (Marina  Zlochin) ()%%Title: (people_icons.eps)%%CreationDate: 9/7/09 2:27 PM%%BoundingBox: 34 216 563 735%%HiResBoundingBox: 34.1216 216.0352 562.876 734.626%%DocumentProcessColors: Cyan Magenta Yellow Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset AGM_Gradient 1.0 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI7_ImageSettings: 1%%CMYKProcessColor: 0.74902 0.678431 0.670588 0.901961 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_TemplateBox: 298.5 420.3896 298.5 420.3896%AI3_TileBox: 18.1377 40.9443 577.1377 823.9448%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 595.2756 841.8898%AI5_RulerUnits: 1%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -518 972.8896 1 1829 1044 18 0 0 50 75 0 0%AI5_OpenViewLayers: 7%%PageOrigin:0 0%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI12_CMSettings: 00.MS%AI7_Thumbnail: 128 128 8%%BeginData: 11798 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD19FFC9FD7CFFCACAA1B5C9FD7CFFBBB492BBC9FD7AFFCABB92B4%99CACFFD25FFCAFD2FFFA7FD23FFCAC2BB99FD25FFCAC3BBC2BBBCBCC9CA%FD29FFA1A7CFFD23FFA7A7C2FD22FFCAC292BA92B492BB92B492BA99CAFD%26FFA876CFA6A8FD21FFA875FFCAFD21FFC2BBB4BBB4BBB4BB92BBB4BB92%BBB4C2FD25FF75A1FFA6A6FD21FF4AA1FD21FFCA99B492BB92BB92BB92B4%92BB92B492BB92BBA8FD17FFA8FD05FF7D76A8FFFF7D4AFFFFCF7AA7FFFF%A8A6A7FD15FFA176FFFFFF7C4BFD21FFCAB4BAB4BBB4BBB4BBBABB98BBB4%BBB4BBB4BB92BCFD18FFA8FFFFFFCF4B20A1FFFF4A7CFFFFFFA67AFFFFA7%7AA5CFFFFFFFA7FD0AFFA8CAFFFFFFA7204AA1FFA74A76FD20FFC392BBB4%B592BB989F9FA59FA57BA59F9992B592B592C2FD17FFA7A1FFFFCF204AA1%FF4B4AA1FFFFFFA77A7BFFA77A7ACFFFFFA7AEFD0BFF7CFFFFFF7D4A20CF%FF7520CAFD1FFFC9B4BBB4BB9FA5A5ABFD0AA598BBB4BB92FD18FF75A1FF%FFA17CCA4B4A4BFD05FF7A7AA5CFA6CEFFFFA7A6FD0CFFA14BFFFFFF76A1%A751204BA8FD1EFFC392B4929F7BA581CFA8A67AA57AA57BA57AA581A57A%BB92B4A0FD17FF7D4A4B7C7676264A2076FD05FFA67A7A7AA6A6A77B7AA7%FD0DFF754AA1A1A7764B4A4A76FD1EFFCAB4BB9FA6A5A6A5CEFFFFA7FD0C%A5BB92C2FD18FF514A204A4A4B4A4AA1FD05FFA7817A817AA57A7AA6FD0E%FFA84A204A204A204A20A1FD1EFFB4BA9EA5A7A57AA5A6FFFFA67AA5A5A6%A5A57AA57BA57AA57B9899FD18FFCA264A204B4A4A20CAFD05FFCF7A7B7A%7B7A7B7ACFFD0FFF764A4A4B4A4B204BA8FD1DFFBCBAA5A5A5CECFA6A4A5%A7ACA5CECFFFFFFFCFCEFD04A57BA59EC2FD19FF7C204B4A4B4A4BFD06FF%CF7B7AA57A7B7AA7FD11FF4A4A204A204A4AFD1DFFC3BA7BA5A5A57AADFF%FFA7CFA8FFFFFFA7A67BA5A5A57AA57AA57AA5A0FD19FFA14A204A204A51%FD07FF7B7A7A7B7A7BA8FD11FF7C204B4A4B2076FD1DFFC29FACFD05A5A6%CFFFFFFFCFCFA6A57AA5A5A581A5A5A57BA5A5A5FD1AFF4A4B4A4B207DFD%06FFCAA67AA57A7B7BFD12FF7D20204A202076FD1CFFCA9EA57BA5A5A57B%A57AA5A5A6A5A57AA57BA57AA57AA57AA57AA57AA57AA7FD18FFA14A204A%204A76FFFFC9C2FFC9CAA67A7A7B7A7BA8FD11FFA1204B204B20A1FD1CFF%A0FD0BA57AA580A57BA5A5A57BA5A5A57AA581A57A7AA6FD18FFA1204B20%4A20A1C9FFBBBBCAC2FFAD7A7B7A7B7ACFFD11FF4BFD05207DFD1BFFCAA5%7AA57BA57AA57BA57AA6A7CFA7A67BA47AA57AA57AA57AA57AA57A7B56A6%FD18FF76204BA120207DCA99C299BB9AFFA67A7AA77B7AA6FD11FF512075%4B4A20A8FD1BFFCFFD09A5FD07FFA6A580A57BA580A5A6A59F9F7A7BA6FD%18FF7620CAFF4B20A1FFC292BBB4CAFFA77AA6FFCF7AA6FD11FF2044A8A8%2044A1FD1BFFA7A57BA5A5A57BA5A6FD09FFA8A57AA57AA5A7A67A9F7A7B%50A7FD18FF4A4BFFFF762076FFC9B492BBCAFFA67AA6FFCF7B7BFD10FFA8%204BFFFF4B20A7FD1BFFCEFD06A5A6FFFFCFA7CEA7CFFD04FFCFCEA5A6CF%CE7A9F7A7B7A7AA7FD18FF4B76FFFFA1207DFFFF92B499FFFFA750CFFFFF%7C9FFD10FFA820A1FFFF4B207DFD1BFFA7A57BA57AA5A5FFA8A67AA57AA5%7AA6A7FD06FFCF7A9F7A7B7A7A7BFD19FF26A8FFFF7D2076FFA8BB92BBCA%FFA67AA7FFFFA77BFD10FFA84BA8FFFF7D20A8FD1CFFFD05A5CFA7A5A4A5%81A5A5A57AA5A5CFFFFFCFCE7AA57A7B7A7B7ACFFD19FF76A8FFFFCF20A1%FFCABBCA99FFFFA77AFFFFFFA8A6FD10FFA84BFFFFFF7D207DFD1CFFA67A%A57AA6A6A47AA57AA57AA57AA57AA57AA57BA57A7B7A7B7A7A50A7FD1AFF%76FFFFFFA84A7DFFA1C3FFBBCAFFA77BCFFFFFCF7CFD10FFA876FFFFFFA8%20A8FD1CFFA7FD07A57BA5A5A57AA581A57AA57AA57A9F7A7B7A7B7AA8FD%1BFFA8A8FFFFFF4BA8FFCAC9FFBCFFFFCF7BFFFFFFCFCFFD10FFA876FFFF%FFA84AA7FD1DFFA0A47AA57AA57AA57AA57AA57AA57AA57AA57A7B567B7A%7A7BCFFD1CFFA8FD04FF52A8FFCAFFCAC3CAFFA7A6FD1BFF4BFD1FFFA6A5%7AA5A5A57BA5A5A57BA581A57AA57A7B7A7B7A7BA6FD23FF7CFD05FFCAFF%FFFFA7FD1AFFA876CAFD1FFFA7A57AA57AA57AA57AA57A9F7A7B747B7A7A%7BA7A8FD24FFCACAFD07FFA8CFFD1BFF7DFD22FFCFA0A57A7A7A9FFD057A%7B7BA7A7FD4CFFCFFD25FFA8A8A6A67BA67BA67CA7A8FDFCFFFD4EFFA8FF%A8FFA8FFA8FFA8FD27FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD23FFA8FFA8FF%A8FFA8FFA8FD14FFA8FFA8FFA8FFA8A8A8A9A8FFA8FFA8FFA8FD1BFFA8FF%A8FFA8FFA8A9A8AFFD07A8FFA8FFA8FFA8FFA8FD1BFFA8FFA8FFA8FFFD07%A8FFA8FFA8FDFCFFFDD1FFA1C3CAFFCAFD44FFA7CFA7CFCFFD32FFBBB4BB%92C9FD41FFA7A57A807A7A7AA581A7CFFD2FFF99B492929AFD40FF7BA47A%A57AA57AA57AA57AA5A8FD2EFFC992BB92CFFD3FFF7B7A7A817A7B7A817A%7B7A817A7AA6FD2DFFC9B492CAFD3FFFA6A47AA57AA57AA57AA57AA57AA5%7AA5A6FD2CFFC9BBFD40FFA7807A7B50A57A7B7AA57A7A7AA57A7B7A7AA6%FD2BFFA1FD41FFA67A7B4A4B50A57AA57AA6A8A67AA57AA57A80A7FD29FF%7DFD41FFCF7A81504A204A7A817A81A8FFCF817A7B7A7B7A7BA8FD27FF76%A7FD41FFA7A4807B4A4B50A57AA57BFFFFFF7BA57AA57AA57AA6FD26FF7C%7CFD2EFFCAFD13FFA6747B50754A7B7A817A7BA7FFA77A7A7B7A7B7A817A%A7FD1DFFCFCAFD05FF764AA8FD22FFCAC3FD09FF99CAFD11FFA1764A4B4A%4B26517AA57AA57AA5A7CEA6A67BA57A7B7AA57BFD1CFFA14A75A8FFFFFF%7C4A76FD22FFCA92B4C3FD06FFCABBC2FD0EFFCF7D752044204A204A204A%204A7A7B7AA6CFFD05FFA7A77B7A7A7AA7FD1BFF4B4A2051FFFF754A4ACF%FD22FFA0B492C2FFFFCACAC3BB92C3FD06FFCAFD06FFA7A1767676A1A1A1%504B4A4B264B20757AA5CFFD09FFA7A67AA5FD1BFFA1204A4AFF764A4A7C%FD23FFCAB4BBC3CABCBBB4B4BBFD09FFCAFD04FFA8CAA8FD05FFCF817A4B%204A204A267AA6FD05FFCFA7A6A7A7CFA8CFA6CFFD1BFF7C4B7C4B4A264A%A1FD24FFCA99BB92B492BA99FD09FFA1CAFD0DFF7AA5504B4A4B204B7ACF%FD05FFA57A7A7A817A817BA6A7FD1CFFA74A4A4A4B4ACAFD23FFCABBBB92%BBB4BB92BBC3FD08FFC2FD0DFFA87B7A74204A204A207BCFFD04FFAD7A7B%7A7B7A7B7A7A50A5FD1BFF7C204A204A264A7CFD22FFCA92B492B492BB92%B592B499CACAFFFFFFA8BBA1FD0EFF7BA5504B4A4B204B7BFD05FFA7817A%817AA57A817AA57BFD1AFF76204B4A4B4A4B2075FD22FF92BB92B492BBB4%BB92BBB4B492BBBCC299BBC2FD0FFFA67A4A204A204A207BFD05FFA77A7B%7A7B7A7B7A7B7A7BA8FD18FF75204A264A204B264A207CFD1FFFCA92B492%BB99BB92B492B592BB92B492B492B5A0FD10FFA77A4A4B204B204A7AFD05%FFCF7B7AA57A7B7A817A7B7ACFFD17FF7620FD044A4B204B4A4A20CFFD1D%FFC992B499C9FFFFFFCA99B492BB92BB99C3C3FD06FFCAC3FD0BFFCF504A%204A204A4A7BA8FD05FF7A7A7A7B7A7B7A7B7A7AA7FD16FF7C204A7DFF52%4A204A204A202052FD1BFFA7BB92BBA1FD07FFA1BB929292B593C2A0C3A0%C299BCA0FD0DFF7C204B4A4B20757ACFFD05FFA57AA57A7B7AA57A7B7ACF%FD15FFA1204BA8FFFFFF4B4A20514B4A2051FD1AFFC3BCC2FD0CFFCA9ABB%92B492B492BB99C9CFFD0EFF7644504A204A507AA7FFFFCFA8FF7B7A7A7B%7A7B7A7B7A7AA7FD14FFA12076A8FD04FF7D202051FF512020CAFD18FFCA%CAFFA776FFFFFFCAFD0AFFCFC9C9A1CACFFD11FF7D207B4A4B207B7AA7FF%FFA6A7FFA67A7B7A7B7A7B7A7B7ACFFD12FFA87D4BA8FD06FF7D44207CFF%FF4B20A1FD18FF7C51FF7551FFA8A17DFD21FF514A7A50204A7A7A7BFFFF%A67CFF7B7A7A7B7A7B7A7B7A7BA8FD11FFA8A17DFD08FF7C20207DFFFFA7%20A1FD18FF514BCBCFA8FF4B7DA1C3FD20FF7651A54A4B50A57AA5FFFF7B%A6FFA67A7B7A9F7A7B7A7B7BFD1DFF4B4A4AFFFFFFA84AA1FD1BFFB4C9AE%76AFC9BCFD20FF4BA1A750207B7A7B7ACFFF7B7AFF7B7A7A7B7A7B7A7B50%A6FD1CFFA84A2076FD04FF20A8FD1AFFCAC2C9FF75FFFF7C7DFF76A8FD1C%FF76A8FF754A7A7B7A7AA7FF7A7BCFA67A7B7A7B7A7B7A7AA7FD1CFFA120%4BA8FFFFFFA876FD22FF76A8CAFFA8A1FD1BFF76FFFF7D267A7A7B50A6A8%7A50CE7B7A7A7B7A7B7A7A7BFD1DFF20207CFD04FFA77DFD24FF7CA8FFA0%FFA8FFFFCFCAFD05FFA7A8FD0EFFA1FFFF7DA77B7A7A7B7BCF7A7BA7A67A%7B7A7B7A7B7ACFFD1CFF762051FD05FFCAFD28FFC9CACAA8FFCAFD16FF7D%FFFFA8A8FF7B7A7A7BA67A50A77B7A7A7B7A7B50A6FD1CFFA1204BFD37FF%A7A8FD19FFA67A7AA67A7B7BA57A7B7A7B7AA6FD1CFFA84B4BFD54FFA77B%507A507A507B507A50A7FD1CFFA84B4BFD57FFCFA6A57A7B7BA6A6FD1DFF%CA767CFD5CFFA8FD1FFFA8A1A8FDFCFFFDD5FFA8FFA8FFA8A8A8A9A8A8A8%FFA8FFA8FD1FFFA8FFA8FFA8FFA8A8A8AFA8A9A8FFA8FFA8FD1FFFA8FFA8%FFA8FFA8A8A8A9A8A8A8FFA8FFA8FD14FFA8FFA8FFA8FFA8FFA8FD27FFA8%FFA8FFA8FFA8FFA8FD27FFA8FFA8FFA8FFA8FFA8FD18FFA9FFFFFFA8FD2B%FFA8FFFFFFA8FD2BFFA8FFFFFFA8FDFCFFFDFCFFFDFCFFFDFCFFFDDBFFCA%CAFD30FFCAFFCAFD4CFFC3FD2CFFCAC2C2FD05BBC3CAFD49FFC3A1FFFFFF%A1CAFD24FFC3BB92B492B492B492B492BA99CAFD47FFC9C2FFFFC3B4BBFF%FFFFCACAFD1EFFC2BAB4BBB4BABBC2BBC2BBBBB4BAB4C9FD47FF92C3FFC3%8CC2FFFF9AC3FD1EFF99B492B492C2C9FD05FFCAC292B492C2FD46FFC292%C2FD04C993BCFD1EFFBBB492BBB4C9FD04FFC9C9C3CAFFCFBBBA92C3FD45%FFA09292B593B58CBBFD1EFFA0B492B492CAFFFFA7BC92B492B492BBA0C9%98B492C9FD3EFFCFCAFD04FFC992BB92BB92BBCFFD1DFFCABBB4BB92CAFF%FFC2BBB4BBB4BBB4BBB4BABBC2B4BBBBFD3EFF7CFD05FFA19292B59292A0%FD1EFFC292BB92C2FFFF99B492BB92BB92BB92BB92BB6E9392B4C2FD3AFF%A8FFA17CFD05FFBB92B592BB92CAFD1EFFB4BB92BBCFFFC2B4B4BB92BBB4%994A6F92BBB46F92BB92BBFD32FFA8A8FD05FF4B4AA1517CFD04FFC28CFD%0592A1FD1DFFA1B492B49AFFCAB492BB92B492BB6E262093B492209392B4%92CAFD31FFCFA1A8FD04FF4B4A754ACAFFFFFFC392B593BC93B592C2FD1D%FFC3B4BB92CAFFC292BBB4BB92BBB499264B92BB4A4B92BB92BBC3FD32FF%A87675CAFFFF764A204BA8FFFFC98C99A1FFFFFF9A9292CAFD05FFCFA8FD%15FF99B492B4A7FF92B492BB92B592BBB4926E934A4A20BB92BB92C3FD12%FFCF7BA7FD06FFA8FD18FF764A7551754A4A4AFFFFCA92C3FD06FF99B4C3%FD05FFA6FD16FFC292BB92CACABB92BB92BBB4BB92996E6F204B266F92BB%B4B4BCFD12FF7B7A56A7FD05FFA6A8FD18FF7C204A204A4A4A7DFF99CAFD%07FFCA8CBCFD04FFCFA6A8FD15FF99B492B4C9C992BB92B492934A4A204A%204A204A6EB592BB92C2FD12FFA67A7AA6FD04FFA67BFD1AFF764A4B4A4B%4A4BA0FD0AFFC392FD04FFCF7BFD16FFC292BB92CAC9BB92BB926F264B20%4B4A4B204B4ABBB4BBB4B4C2FD08FFA8A77B7B7AA57CA7A8FFA8817ACFFF%FFFFA77ACFFD1AFFA84B204B4A4A204A7DFD09FFCA92A1FFFFFFA67AA8FF%A67BA7FD11FFA0B492B49ACA92BB924A204A444A204A204A206FB4B592BB%92C9FD07FFCFA7A6A7A6A57A7A7A7B7BCEA8CFFFFFA7A67AA6FD1CFF75FD%054A204A76FD09FF9AC2FFFFFFA67AA7A87A7AA7FD11FFCA92BB92BBC9BB%924B4A6F92BB6E4B204B204B6EBB92BB92BBCAFD0DFFCF7C7A7A7A507B7B%7B7A7A7A7BA8FD1CFF76204A4BA8A17C26204BFD08FFCA93FFFFAE7A7B7A%A77CA7FD12FFA8BB92B492C29A6E44B592B492932026204A206E92BB92B4%99FD10FFA77B7AA57A7B7A817AA5CFFD1DFF754A76FD05FF764A4BFD08FF%C3CAFF7B817A7B7AA7A8CFA8CFA8FD0FFFC2B492BBB4996EBBB4BB92BB92%4B204B204B6EBB92BB92CAFD11FFA77A7A7B7A7B7A7BA8FD1DFFA84B4BFD%07FFA85120FD07FFA09F7A7A7A7B7A7B7A7A7A7B7CCFCFFD0FFF92B492BB%92B592BB92B59293204A204B206E92BB92BBFD13FF7A7B7A7B7A7AA7FD1E%FFCA20A8FD09FFA14BFFFFFFA7A67BFD047A7B7A7B7A7B7CCFFD13FFCA92%BB92BB92BB92BB92BB6E4B206F4A276EBB92BBCAFD12FFA77A7A7B7A7A7B%FD1FFF7D4BA8FD0AFFA876A8A6A67BA6A7A67B7B7A7B7A7BA7FD16FFC392%9292B5929292B5926E20266E6E20939292A1FD13FFA67A7B7A7B7AA6FD1F%FF7C76FD15FFA77B7A7BA6FD18FFC392BB92BB92BB92BB6E4B20996E4B92%BBC3FD08FFA7CFFD09FFA7507B7A7B7A7B7A7BA8FD1DFF76CAFD16FFA77A%7ACFFD19FFC992B4929392BB924A204B92922099C9FD0AFFA0FD08FFCE7A%7B7A7B7A7B7A7B7A7BA7FD1CFFCAFD18FF7A7BCFFD1BFF9ABB92B492B54A%2668BB934BCAFD0BFFA77BFD06FFA7507B7A7B507A507A507A747A7CFD33%FFA87B7BFD1DFFA8CA9ABC6F2020C3C9A84BFD0DFFA67BCFFFFFA8A67A7B%7A7B7A7B7BA67CA67B7B7A7AA7FD33FF7AA6FD21FFA120A8FFFFA87DFD0D%FFA87B507B7B7A507B507A74A0A7FD05FFA8A6507AA7FD31FFA87AA6FD21%FF4A51FFFFFFA87DFD0EFFA8A0507A747B7A7B7CCFFD09FFCF7B7ACFFD30%FFCF7ACFFD20FFA84BA8FFFFFFA1FD10FFA8A77B7B7BA6A8FD0DFF7C7BFD%30FFA87BA8FD20FF767DFD04FFA8A8FD24FFA7A7FD2FFFCF7BFD20FFCF7D%FD2CFFA8FD2FFFA7A6FD20FFA8FD5DFFA7A7FD7EFFA8FDBDFFA8FFA8FFFD%07A8FFA8FFA8FD1FFFA8FFA8FFA8FFFD07A8FFA8FFA8FFA9FD1DFFA8FFA8%FFA8FFFD07A8FFA8FFA8FD14FFA8FFFFFFA8FFA8FFA8FD27FFA8FFA9FFA8%FFA8FFA8FD27FFA8FFA8FFA8FFFFFFA8FD87FFFF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog%%BeginSetupuserdict /_useSmoothShade true putuserdict /_aicmykps true putuserdict /_forceToCMYK true putAdobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI3_BeginRidercurrentpacking true setpackingsetpacking%AI3_EndRider%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (LiveBlends.aip)%AI8_PluginGroupInfo(Adobe Tracing Object) (Tracing) (TracingSuite.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (CalligBrushTool.aip)%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Flare.aip)%AI8_PluginGroupInfo(Adobe Symbolism) (Adobe Symbolism) (ParticleSystem.aip)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)%AI8_PluginGroupInfo(Pathfinder Suite) (Adobe Compound Shape) (PathFinderS.aip)%AI8_PluginGroupInfo(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)%AI5_End_NonPrinting--5 Bn%AI5_BeginGradient: (Unnamed gradient 17)(Unnamed gradient 17) 0 2 Bd[<5C5C5B5B5C5C5B5B5C5C5B5B5B5B5B5B5B5B5B5C5C5B5B5B5A5B5B5B5A5A5A5B5A5A5A5A5B5B5B5B5B5B5B5B5B><A5A6A8A9A9AAACADAEAFB1B2B3B5B5B6B7B9B9BABBBCBDC0C2C3C3C4C6C7C8C9CBCCCCCECFCFD0D2D3D4D5D7D9>1<4C4D4E4F51525354565758595B5C5D5F606163646666686A6A6C6D6F6F717374757678797A7C7E7E8081838385><83828281807F7F7E7D7C7C7B7A7A797877777675747473727271706F6F6E6D6C6C6B6A6A696867676665646463><51504F4E4D4C4B4A494847464544434241403F3E3D3C3B393837363534333231302F2E2D2C2B2A292827262524>0.0352944 %_Br[0.356863 0.85098 1 0.521569 0.388235 0.141176 0.035294 2 50 100 %_BS%_0.356863 0.85098 1 0.521569 0.388235 0.141176 0.035294 2 50 100 Bs0.360784 0.647059 1 0.298039 0.513726 0.317647 0.035294 2 50 0 %_BS%_0.360784 0.647059 1 0.298039 0.513726 0.317647 0.035294 2 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 23)(Unnamed gradient 23) 0 2 Bd[<000000000000000000000000000001030405060708090A0B0C><BDBFC0C1C2C3C4C5C6C6C7C8C9CACBCDCECFD0D1D2D3D4D5D5>1<00000000000000000000000000000000000101010101010101><FFFEFDFCFBFAF9F8F7F6F5F4F3F1F0EFEEEDECEBEAE9E8E7E6><666564636261605F5E5D5C5B5A595857565554535251504F4E>04 %_Br[0.047059 0.835294 1 0.003922 0.901961 0.305882 0 2 50 100 %_BS%_0.047059 0.835294 1 0.003922 0.901961 0.305882 0 2 50 100 Bs0 0.741176 1 0 1 0.4 0 2 50 0 %_BS%_0 0.741176 1 0 1 0.4 0 2 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 31)(Unnamed gradient 31) 1 2 Bd[<24232121201F1D1C1B1B1A1918171514131312100E0D0C0B0A0909080706050504030201000000><1A1A19181716151413131211100F0F0E0D0C0C0B0B0A0908070706050504030302020100000000><191817161514141312111211100F0F0E0D0C0B0A09090807060505040404030302020100000000>0<D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><DBDCDDDEDFE0E1E2E3E4E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F6F7F8F9FAFBFCFDFEFF>4 %_Br[0.83 0 50 0 %_BS%_0.83 0 50 0 Bs0 0 0 0 1 1 1 2 50 78.1421 %_BS%_0 0 0 0 1 1 1 2 50 78.1421 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 40)(Unnamed gradient 40) 0 2 Bd[<515150504F4F4E4F4E4E4D4D4D4B4B4A4A49494848474747464645454343424241414140403F3F3D3E3C3C3B3B3A3A3A39393838373736363434343333313130302F2F2D2D2D2C2C2B2B2A2A29292828><292928282626272526242525232424232322222221212020201F201E1F1F1E1E1D1D1D1C1C1B1B1B1A1B1B1A1A19191918181717181617151516141412131312121111121010110F100E0F0F0E0E0D0D><FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFDFCFBFBFAF9F8F6F5F4F3F2F1EFEEEDECEAE9E8E6E5E3E2E1E0DFDDDCDBDAD8D7D6D5D4D2>0<BABABBBBBCBCBDBDBEBEBFBFBFC0C0C1C1C2C2C3C3C4C4C4C5C5C6C6C7C7C8C8C9C9C9CACACBCBCCCCCDCDCECECFCFCFD0D0D1D1D2D2D3D3D4D4D4D5D5D6D6D7D7D8D8D9D9D9DADADBDBDCDCDDDDDEDE><BABABBBBBCBCBCBDBDBEBEBEBFBFBFC0C0C1C1C1C2C2C3C3C3C4C4C5C5C5C6C6C7C7C7C8C8C9C9C9CACACACBCBCCCCCCCDCDCECECECFCFD0D0D0D1D1D2D2D2D3D3D4D4D4D5D5D5D6D6D7D7D7D8D8D9D9><0102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F2021222324252627282A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F5051>4 %_Br[0.156863 0.05098 0.823529 0 0.870588 0.85098 0.317647 2 50 100 %_BS%_0.156863 0.05098 0.823529 0 0.870588 0.85098 0.317647 2 50 100 Bs0.317647 0.160784 1 0 0.729412 0.729412 0.003922 2 50 0 %_BS%_0.317647 0.160784 1 0 0.729412 0.729412 0.003922 2 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 9)(Unnamed gradient 9) 0 2 Bd[<51525353545556575758595A5B5B5C5D5E5E5F60616161626263646464656667666768><29292A2C2D2E2F3031323334353638393A3B3E3F404142434445464748494A4B4C4D4E>1<000101010101010101010202020202020303040404050506060707080809090A0B0B0C><BAB9B8B8B7B6B5B4B4B3B2B1B0B0AFAEADADACABAAA9A9A8A7A6A5A5A4A3A2A1A1A09F><BAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A7A6A5A4A3A2A1A09F9E9D9C9B9A999897>0.0039224 %_Br[0.407843 0.305882 1 0.047059 0.623529 0.592157 0.003922 2 50 100 %_BS%_0.407843 0.305882 1 0.047059 0.623529 0.592157 0.003922 2 50 100 Bs0.317647 0.160784 1 0 0.729412 0.729412 0.003922 2 50 0 %_BS%_0.317647 0.160784 1 0 0.729412 0.729412 0.003922 2 50 0 BsBD%AI5_EndGradient%AI5_BeginPalette0 0 Pb0.74902 0.678431 0.670588 0.901961 ([Registration]) 0 Xs([Registration])PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 50 Lb(Layer 1) Ln0 Au0 O0 J 0 j 1 w 4 M []0 d0 XR239.3896 658.3735 m255.9077 690.6226 328.6064 721.6187 357.792 671.6846 c357.9355 671.4404 358.0615 671.1992 358.1973 670.9561 C361.0957 682.8389 358.2998 694.7842 346.3154 704.9233 c301.1836 743.103 241.041 686.7212 235.8564 649.3354 c235.3306 645.5435 235.3833 641.9668 235.9087 638.6372 c234.9897 644.8315 235.9209 651.6011 239.3896 658.3735 cBb1 (Unnamed gradient 23) 283.0298 713.709 -70.5792 150.265 0.970734 -0.359877 0.336443 0.974956 -2436.3164 3148.4512 Bg96.1806 -120.1852 -103.9633 -85.8448 317.5469 749.0435 Xm5238.8276 -6546.3262 -103.9633 -85.8448 -4921.2808 7295.3696 Bc96.1806 -120.1852 -103.9633 -85.8448 317.5469 749.0435 Bm5238.8276 -6546.3262 -103.9633 -85.8448 413.7275 628.8584 Bcf0 BB358.1973 670.9561 m352.5332 647.7339 325.0947 624.749 301.791 615.9419 c283.688 609.1001 265.7109 609.4727 254.4468 614.4966 c245.2188 618.6118 237.7222 627.1445 235.9087 638.6372 c236.9653 631.5151 240.4692 625.1533 245.3882 620.4258 c254.0923 612.0596 270.3936 605.6606 289.0835 605.7798 c325.2275 606.0088 379.9824 632.1851 358.1973 670.9561 CBb1 (Unnamed gradient 9) 281.5293 698.979 -70.5792 150.2669 1 0 0 1 0 0 Bg49.9643 -141.717 -131.8846 -46.4978 350.0381 723.1328 Xm2705.1814 -7672.8779 -131.8846 -46.4978 -2355.1436 8396.0107 Bc49.9643 -141.717 -131.8846 -46.4978 350.0381 723.1328 Bm2705.1814 -7672.8779 -131.8846 -46.4978 400.002 581.416 Bcf0 BB254.4468 614.4966 m265.7109 609.4727 283.688 609.1001 301.791 615.9419 c325.0947 624.749 352.5332 647.7339 358.1973 670.9561 C358.0615 671.1992 357.9355 671.4404 357.792 671.6846 c328.6064 721.6187 255.9077 690.6226 239.3896 658.3735 c235.9209 651.6011 234.9897 644.8315 235.9087 638.6372 c237.7222 627.1445 245.2188 618.6118 254.4468 614.4966 cBb1 (Unnamed gradient 23) 275.6909 711.1216 -70.5792 150.2667 0.970734 -0.359877 0.336443 0.974956 -2436.3164 3148.4512 Bg96.1817 -120.1866 -103.4607 -85.4298 312.5986 744.957 Xm5226.856 -6531.3667 -103.4607 -85.4298 -4914.2573 7276.3237 Bc96.1817 -120.1866 -103.4607 -85.4298 312.5986 744.957 Bm5226.856 -6531.3667 -103.4607 -85.4298 408.7803 624.7705 Bcf0 BB254.4468 614.4966 m265.7109 609.4727 283.688 609.1001 301.791 615.9419 c325.0947 624.749 352.5332 647.7339 358.1973 670.9561 C358.0615 671.1992 357.9355 671.4404 357.792 671.6846 c328.6064 721.6187 255.9077 690.6226 239.3896 658.3735 c235.9209 651.6011 234.9897 644.8315 235.9087 638.6372 c237.7222 627.1445 245.2188 618.6118 254.4468 614.4966 cBb1 (Unnamed gradient 40) 326.4668 603.1719 120.7705 138.5075 1 0 0 1 0 0 Bg-70.8604 119.0089 112.0624 66.7243 269.769 569.4131 Xm-4196.7705 7048.4063 112.0624 66.7243 4466.5391 -6478.9932 Bc-70.8604 119.0089 112.0624 66.7243 269.769 569.4131 Bm-4196.7705 7048.4063 112.0624 66.7243 198.9087 688.4219 Bcf0 BBU109.6309 692.2446 m110.2119 694.2114 110.1226 696.0444 109.4517 697.7432 c108.7813 699.4424 107.708 700.5151 106.1885 700.9624 c104.6685 701.4092 103.1479 701.0962 101.6729 700.0684 c100.1978 698.9951 99.1694 697.4751 98.5884 695.5078 c98.0068 693.5859 98.0518 691.7529 98.7222 690.0986 c99.3926 688.3999 100.4658 687.3267 102.0308 686.8354 c103.5508 686.3882 105.0259 686.7007 106.501 687.7739 c107.9766 688.8022 109.0493 690.3223 109.6309 692.2446 c109.6309 692.2446 lBb1 (Unnamed gradient 17) 102.4717 708.5093 -83.6599 55.6863 1 0 0 1 0 0 Bg6.14942 -55.3457 -16.3705 -1.81891 110.6489 709.418 Xm882.4628 -7942.2983 -16.3705 -1.81891 -771.814 8651.7168 Bc6.14942 -55.3457 -16.3705 -1.81891 110.6489 709.418 Bm882.4628 -7942.2983 -16.3705 -1.81891 116.7983 654.0723 Bcf0 BB134.1743 714.1055 m137.6167 720.4097 133.0566 714.5083 120.584 696.4023 c115.6216 688.042 108.6475 683.6611 99.6611 683.2139 c94.2515 683.0796 89.5571 684.8682 85.4893 688.668 c82.1362 691.7529 79.4092 695.2842 77.2632 699.2632 c81.5103 689.7412 85.6235 682.0068 89.5127 675.9712 c93.4023 669.936 95.0566 665.1523 94.4751 661.5757 c93.8042 657.9995 92.8657 652.6348 91.6587 645.4814 c90.4517 638.2842 90.9434 628.8062 93.2236 616.959 c94.207 629.8794 97.2471 641.1006 102.3882 650.5781 c105.7861 653.7969 108.5132 648.6558 110.5249 635.1543 c112.5366 621.6089 113.7437 612.1309 114.146 606.6768 c117.231 616.959 118.4375 630.5049 117.7671 647.3145 c117.0962 664.124 122.5508 686.3882 134.1743 714.1055 c134.1743 714.1055 lBb1 (Unnamed gradient 17) 106.1582 708.9189 -83.6599 55.6863 1 0 0 1 0 0 Bg6.14942 -55.3457 -65.9142 -7.32368 140.4814 712.7324 Xm884.5534 -7961.1143 -65.9142 -7.32368 -744.0718 8673.8467 Bc6.14942 -55.3457 -65.9142 -7.32368 140.4814 712.7324 Bm884.5534 -7961.1143 -65.9142 -7.32368 146.6309 657.3867 Bcf0 BB141.9531 727.5176 m141.3721 729.2168 141.2378 730.9604 141.5063 732.7036 c141.7744 734.626 l141.3271 734.0449 140.9253 733.374 140.5674 732.7036 c139.6733 731.1841 138.4663 729.7979 136.9463 728.5015 c134.9346 726.937 132.833 726.3555 130.5977 726.7134 c129.0781 726.9814 127.647 727.3389 126.3057 727.8306 c126.9321 727.3389 127.6025 726.7578 128.3179 726.1763 c129.3462 725.3271 130.106 724.2544 130.5977 722.958 c131 721.8398 130.7764 720.6328 129.9722 719.3813 c126.3506 714.5977 l127.5132 714.9551 128.6758 715.3574 129.8823 715.8047 c130.5083 716.0728 131.1792 716.2964 131.8496 716.4307 c133.9507 717.2803 135.5151 716.7881 136.499 714.9551 c137.3936 713.2568 138.332 711.5576 139.3154 709.8584 c140.5229 707.7129 l140.478 708.3833 140.478 709.0542 140.478 709.6348 c140.478 711.2002 140.478 712.7197 140.478 714.2402 c140.478 715.3574 140.6567 716.4307 141.0146 717.4141 c141.5957 719.2021 142.8921 720.3647 144.9937 720.9458 c147.229 721.7061 149.5532 722.1982 152.0122 722.3315 c149.7324 722.6445 147.6309 723.1367 145.6641 723.8965 c143.7417 724.6563 142.5347 725.8638 141.9531 727.5176 c141.9531 727.5176 lBb1 (Unnamed gradient 23) 126.3057 721.1694 0 25.7065 1 0 0 1 0 0 Bg25.7065 0 0 -30.9131 126.3057 736.626 Xm8022.3052 0 0 -30.9131 -7895.9995 736.626 Bc25.7065 0 0 -30.9131 126.3057 736.626 Bm8022.3052 0 0 -30.9131 152.0122 736.626 Bcf0 BB282.9521 524.3726 m283.2646 522.2715 284.248 520.3486 285.9922 518.6948 c287.6904 517.0405 289.6133 516.1016 291.7139 515.8779 c293.8604 515.6992 295.6035 516.2808 296.8994 517.6216 c298.2412 519.0078 298.7783 520.7959 298.4648 522.897 c298.1973 524.9985 297.2139 526.876 295.5146 528.5298 c293.7705 530.1841 291.8486 531.123 289.7471 531.3467 c287.6465 531.5698 285.9023 530.9438 284.5615 529.5581 c283.2197 528.2173 282.6836 526.4736 282.9521 524.3726 c282.9521 524.3726 lBb1 (Unnamed gradient 17) 289.6655 537.6812 -85.7321 59.0235 1 0 0 1 0 0 Bg4.39258 -58.8599 -19.573 -1.46069 299.4697 538.4126 Xm608.7415 -8157.0396 -19.573 -1.46069 -309.272 8695.4521 Bc4.39258 -58.8599 -19.573 -1.46069 299.4697 538.4126 Bm608.7415 -8157.0396 -19.573 -1.46069 303.8623 479.5527 Bcf0 BB324.6631 535.9961 m327.4795 540.8691 330.2959 545.25 333.2012 549.1396 c323.0088 538.8574 315.3193 531.3018 310.1338 526.5181 c304.9922 521.7344 299.582 517.3535 293.8604 513.2852 c292.0723 511.9888 290.3281 510.6924 288.6289 509.3511 c282.0576 503.9863 275.6201 497.4146 269.2275 489.5908 c262.834 481.7671 256.5752 477.3403 250.3608 476.2241 c254.2954 476.0005 259.168 477.3403 265.0244 480.2476 c270.8369 483.1533 276.1123 486.7295 280.8057 490.9766 c282.2813 492.3179 283.6221 493.3462 284.8291 494.0615 c288.2725 495.4028 291.1328 494.5532 293.4131 491.5132 c295.335 488.9204 296.4531 485.9697 296.7666 482.6616 c297.0791 479.3076 296.6768 475.8203 295.5586 472.1553 c292.5195 462.1411 287.4229 453.2451 280.2695 445.4658 c276.6484 441.4863 272.8037 437.6865 268.7803 434.1104 c268.9141 434.1104 269.0039 434.1553 269.0928 434.1992 c278.5703 438.8047 286.9307 444.9727 294.1729 452.7979 c301.1025 460.2632 305.8867 468.7573 308.5234 478.3242 c309.418 481.499 309.6416 484.7627 309.1504 488.0708 c309.6865 488.0264 310.2227 487.9365 310.7148 487.8027 c319.7451 484.1367 323.9033 477.2969 323.2324 467.2373 c323.0088 463.75 322.6953 460.2197 322.3828 456.687 c328.7754 466.0757 330.2959 476.4478 327.0322 487.8027 c325.6465 493.1675 323.0986 498.4424 319.2979 503.584 c315.498 508.7695 314.7822 514.269 317.0625 520.0361 c319.3428 525.8027 321.8467 531.123 324.6631 535.9961 c324.6631 535.9961 lBb1 (Unnamed gradient 17) 289.9146 537.6997 -85.7321 59.0235 1 0 0 1 0 0 Bg4.39258 -58.8599 -91.7824 -6.84951 335.8047 541.1245 Xm609.8116 -8171.3794 -91.7824 -6.84951 -274.0068 8712.5039 Bc4.39258 -58.8599 -91.7824 -6.84951 335.8047 541.1245 Bm609.8116 -8171.3794 -91.7824 -6.84951 340.1973 482.2646 Bcf0 BB349.3848 571.0903 m348.625 571.9844 347.5967 572.3867 346.3896 572.3423 c344.4678 572.5659 342.9473 571.895 341.8301 570.3306 c341.6064 570.9111 341.2939 571.4927 340.9805 571.9844 c339.8633 573.6387 338.2529 574.4434 336.2412 574.3984 c335.6162 574.2646 335.0352 574.0859 334.498 573.8623 c333.3809 573.46 332.71 572.7002 332.3975 571.4927 c332.084 570.375 332.084 569.3022 332.3525 568.2295 c332.71 566.6646 333.1572 565.0996 333.6934 563.6245 c333.9619 562.8647 334.1855 562.0596 334.3643 561.21 c335.2129 557.0078 334.7656 552.9844 332.9336 549.1396 c333.0684 549.229 333.1572 549.3184 333.292 549.3633 c335.3477 550.9277 337.4482 552.4033 339.6396 553.8789 c340.668 554.5938 341.6953 555.3091 342.7236 556.0688 c344.6914 557.5889 346.4795 559.3325 348.0889 561.2549 c349.832 563.4009 350.6367 565.8154 350.4131 568.542 c350.3242 569.5703 349.9668 570.4194 349.3848 571.0903 c349.3848 571.0903 lBb1 (Unnamed gradient 23) 332.1563 561.77 0 18.293 1 0 0 1 0 0 Bg18.293 0 0 -29.3037 332.1563 576.4434 Xm8228.2285 0 0 -29.3037 -7896.0723 576.4434 Bc18.293 0 0 -29.3037 332.1563 576.4434 Bm8228.2285 0 0 -29.3037 350.4492 576.4434 Bcf0 BBu432.4229 481.0522 m431.6631 480.291 431.2598 479.3984 431.3047 478.2803 c431.2598 477.2515 431.6631 476.313 432.4229 475.5532 c433.1826 474.7935 434.1221 474.3916 435.1943 474.3916 c436.2676 474.3916 437.2061 474.7935 437.9658 475.5532 c438.7266 476.313 439.084 477.2515 439.084 478.2803 c439.084 479.3984 438.7266 480.291 437.9658 481.0522 c437.2061 481.812 436.2676 482.2144 435.1943 482.2144 c434.1221 482.2144 433.1826 481.812 432.4229 481.0522 c432.4229 481.0522 lBb1 (Unnamed gradient 17) 431.3018 478.3027 0 7.78223 1 0 0 1 0 0 Bg7.78223 0 0 -11.8228 431.3018 484.2144 Xm8327.3438 0 0 -11.8228 -7896.042 484.2144 Bc7.78223 0 0 -11.8228 431.3018 484.2144 Bm8327.3438 0 0 -11.8228 439.084 484.2144 Bcf0 BB450.082 484.271 m449.3662 484.9858 448.5166 485.3438 447.5332 485.2993 c446.5049 485.3438 445.6563 484.9858 444.9854 484.271 c444.2695 483.5557 443.9121 482.7061 443.9121 481.7227 c443.9121 480.7383 444.2695 479.8892 444.9854 479.1748 c445.6563 478.4585 446.5049 478.1021 447.5332 478.1021 c448.5166 478.1021 449.3662 478.4585 450.082 479.1748 c450.752 479.8892 451.1104 480.7383 451.1543 481.7227 c451.1104 482.7061 450.752 483.5557 450.082 484.271 c450.082 484.271 lBb1 (Unnamed gradient 17) 443.9121 481.7026 0 7.24219 1 0 0 1 0 0 Bg7.24219 0 0 -11.2417 443.9121 487.3438 Xm8339.9121 0 0 -11.2417 -7896 487.3438 Bc7.24219 0 0 -11.2417 443.9121 487.3438 Bm8339.9121 0 0 -11.2417 451.1543 487.3438 Bcf0 BB448.3828 468.5791 m449.0537 469.2935 449.4111 470.1445 449.4561 471.1265 c449.4111 472.1099 449.0537 472.9604 448.3828 473.6753 c447.668 474.3916 446.8184 474.748 445.835 474.7041 c444.8066 474.748 443.957 474.3916 443.2861 473.6753 c442.5713 472.9604 442.2129 472.1099 442.2129 471.1265 c442.2129 470.1445 442.5713 469.2935 443.2861 468.5791 c443.957 467.8628 444.8066 467.5063 445.835 467.5063 c446.8184 467.5063 447.668 467.8628 448.3828 468.5791 c448.3828 468.5791 lBb1 (Unnamed gradient 23) 442.2129 471.1069 0 7.24316 1 0 0 1 0 0 Bg7.24316 0 0 -11.2417 442.2129 476.748 Xm8338.2129 0 0 -11.2417 -7896 476.748 Bc7.24316 0 0 -11.2417 442.2129 476.748 Bm8338.2129 0 0 -11.2417 449.4561 476.748 Bcf0 BB458.6201 480.2021 m457.8164 480.2021 457.1455 479.9346 456.5645 479.353 c455.9824 478.7715 455.7148 478.1021 455.7148 477.2969 c455.7148 476.5366 455.9824 475.8203 456.5645 475.2407 c457.1455 474.6587 457.8164 474.3916 458.6201 474.3916 c459.4248 474.3916 460.0957 474.6587 460.6768 475.2407 c461.2588 475.8203 461.5264 476.5366 461.5264 477.2969 c461.5264 478.1021 461.2588 478.7715 460.6768 479.353 c460.0957 479.9346 459.4248 480.2021 458.6201 480.2021 c458.6201 480.2021 lBb1 (Unnamed gradient 17) 455.7148 477.2969 0 5.81152 1 0 0 1 0 0 Bg5.81152 0 0 -9.81055 455.7148 482.2021 Xm8351.7148 0 0 -9.81055 -7896 482.2021 Bc5.81152 0 0 -9.81055 455.7148 482.2021 Bm8351.7148 0 0 -9.81055 461.5264 482.2021 Bcf0 BB466.7129 481.5439 m466.3105 481.9463 465.8184 482.1699 465.2822 482.1699 c464.7002 482.1699 464.2539 481.9463 463.8516 481.5439 c463.4482 481.1411 463.2246 480.6948 463.2246 480.1128 c463.2246 479.5767 463.4482 479.084 463.8516 478.6821 c464.2539 478.2803 464.7002 478.1006 465.2822 478.1006 c465.8184 478.1006 466.3105 478.2803 466.7129 478.6821 c467.1143 479.084 467.2939 479.5767 467.2939 480.1128 c467.2939 480.6948 467.1143 481.1411 466.7129 481.5439 c466.7129 481.5439 lBb1 (Unnamed gradient 17) 463.2246 480.1353 0 4.06934 1 0 0 1 0 0 Bg4.06934 0 0 -8.06934 463.2246 484.1699 Xm8359.2246 0 0 -8.06934 -7896 484.1699 Bc4.06934 0 0 -8.06934 463.2246 484.1699 Bm8359.2246 0 0 -8.06934 467.2939 484.1699 Bcf0 BB468.4561 476.6714 m467.6514 476.7148 466.9814 476.4023 466.4434 475.8203 c465.8633 475.2842 465.5498 474.6152 465.5947 473.8096 c465.5498 473.0044 465.8633 472.3335 466.4434 471.7534 c466.9814 471.1719 467.6514 470.9043 468.4561 470.9043 c469.2607 470.9043 469.9307 471.1719 470.5127 471.7534 c471.0938 472.3335 471.3613 473.0044 471.3613 473.8096 c471.3613 474.6133 471.0938 475.2842 470.5127 475.8203 c469.9307 476.4023 469.2607 476.7148 468.4561 476.6714 c468.4561 476.6714 lBb1 (Unnamed gradient 23) 465.5908 473.79 0 5.77051 1 0 0 1 0 0 Bg5.77051 0 0 -9.81055 465.5908 478.7148 Xm8361.6318 0 0 -9.81055 -7896.041 478.7148 Bc5.77051 0 0 -9.81055 465.5908 478.7148 Bm8361.6318 0 0 -9.81055 471.3613 478.7148 Bcf0 BB483.0752 466.2993 m483.6563 466.3428 484.1025 466.5229 484.5059 466.9248 c484.9082 467.3267 485.0869 467.7734 485.0869 468.3555 c485.0869 468.937 484.9082 469.3843 484.5059 469.7861 c484.1025 470.188 483.6563 470.3662 483.0752 470.3662 c482.4941 470.3662 482.0469 470.188 481.6436 469.7861 c481.2422 469.3843 481.0635 468.937 481.0635 468.3555 c481.0635 467.7734 481.2422 467.3267 481.6436 466.9248 c482.0469 466.5229 482.4941 466.3428 483.0752 466.2993 c483.0752 466.2993 lBb1 (Unnamed gradient 17) 481.0635 468.333 0 4.02344 1 0 0 1 0 0 Bg4.02344 0 0 -8.06689 481.0635 472.3662 Xm8377.0635 0 0 -8.06689 -7896 472.3662 Bc4.02344 0 0 -8.06689 481.0635 472.3662 Bm8377.0635 0 0 -8.06689 485.0869 472.3662 Bcf0 BB471.3174 463.4375 m472.1221 463.4375 472.793 463.7065 473.373 464.2866 c473.9551 464.8682 474.2236 465.5391 474.2236 466.3428 c474.2236 467.1484 473.9551 467.8193 473.373 468.3555 c472.793 468.937 472.1221 469.25 471.3174 469.2046 c470.5127 469.25 469.8418 468.937 469.3057 468.3555 c468.7246 467.8193 468.4111 467.1484 468.4561 466.3428 c468.4111 465.5391 468.7246 464.8682 469.3057 464.2866 c469.8418 463.7065 470.5127 463.4375 471.3174 463.4375 c471.3174 463.4375 lBb1 (Unnamed gradient 17) 468.4521 466.3232 0 5.77148 1 0 0 1 0 0 Bg5.77148 0 0 -9.8125 468.4521 471.25 Xm8364.4932 0 0 -9.8125 -7896.041 471.25 Bc5.77148 0 0 -9.8125 468.4521 471.25 Bm8364.4932 0 0 -9.8125 474.2236 471.25 Bcf0 BB477.5762 462.0957 m477.1738 461.6938 476.9951 461.2466 476.9951 460.665 c476.9951 460.1284 477.1738 459.6377 477.5762 459.2358 c477.9785 458.8325 478.4258 458.6543 479.0068 458.6543 c479.5879 458.6543 480.0352 458.8325 480.4375 459.2358 c480.8398 459.6377 481.0186 460.1284 481.0635 460.665 c481.0186 461.2466 480.8398 461.6938 480.4375 462.0957 c480.0352 462.4995 479.5879 462.7231 479.0068 462.7231 c478.4258 462.7231 477.9785 462.4995 477.5762 462.0957 c477.5762 462.0957 lBb1 (Unnamed gradient 17) 476.9951 460.6885 0 4.06836 1 0 0 1 0 0 Bg4.06836 0 0 -8.06885 476.9951 464.7231 Xm8372.9951 0 0 -8.06885 -7896 464.7231 Bc4.06836 0 0 -8.06885 476.9951 464.7231 Bm8372.9951 0 0 -8.06885 481.0635 464.7231 Bcf0 BB459.291 472.4243 m458.71 473.0044 458.04 473.3169 457.2793 473.2734 c456.4746 473.3169 455.8047 473.0044 455.2227 472.4243 c454.6416 471.8428 454.3291 471.1719 454.374 470.3662 c454.3291 469.6064 454.6416 468.937 455.2227 468.3555 c455.8047 467.7734 456.4746 467.5063 457.2793 467.5063 c458.04 467.5063 458.71 467.7734 459.291 468.3555 c459.8721 468.937 460.1406 469.6064 460.1406 470.3662 c460.1406 471.1719 459.8721 471.8428 459.291 472.4243 c459.291 472.4243 lBb1 (Unnamed gradient 17) 454.3701 470.3916 0 5.77051 1 0 0 1 0 0 Bg5.77051 0 0 -9.81055 454.3701 475.3169 Xm8350.4111 0 0 -9.81055 -7896.041 475.3169 Bc5.77051 0 0 -9.81055 454.3701 475.3169 Bm8350.4111 0 0 -9.81055 460.1406 475.3169 Bcf0 BB511.0156 457.1777 m511.0615 456.8652 511.1953 456.5522 511.5078 456.3286 c511.7764 456.105 512.0898 456.0615 512.4473 456.105 c512.8047 456.1504 513.0732 456.3286 513.2969 456.5977 c513.5195 456.9106 513.6094 457.2231 513.5654 457.5361 c513.5195 457.894 513.3408 458.1616 513.0732 458.3853 c512.7598 458.6089 512.4473 458.6543 512.0898 458.6089 c511.7314 458.5649 511.4629 458.4307 511.2842 458.1177 c511.0615 457.8486 510.9717 457.5361 511.0156 457.1777 c511.0156 457.1777 lBb1 (Unnamed gradient 23) 511.0049 457.3574 0 2.57129 1 0 0 1 0 0 Bg2.57129 0 0 -6.59277 511.0049 460.6543 Xm8407.0381 0 0 -6.59277 -7896.0332 460.6543 Bc2.57129 0 0 -6.59277 511.0049 460.6543 Bm8407.0381 0 0 -6.59277 513.5762 460.6543 Bcf0 BB489.96 465.27 m489.3789 465.27 488.9316 465.0464 488.5293 464.6445 c488.126 464.2432 487.9482 463.7959 487.9482 463.2139 c487.9482 462.6777 488.126 462.1865 488.5293 461.7832 c488.9316 461.3813 489.3789 461.2031 489.96 461.2031 c490.541 461.2031 490.9883 461.3813 491.3906 461.7832 c491.792 462.1865 491.9717 462.6777 491.9717 463.2139 c491.9717 463.7959 491.792 464.2432 491.3906 464.6445 c490.9883 465.0464 490.541 465.27 489.96 465.27 c489.96 465.27 lBb1 (Unnamed gradient 17) 487.9482 463.2363 0 4.02344 1 0 0 1 0 0 Bg4.02344 0 0 -8.06689 487.9482 467.27 Xm8383.9482 0 0 -8.06689 -7896 467.27 Bc4.02344 0 0 -8.06689 487.9482 467.27 Bm8383.9482 0 0 -8.06689 491.9717 467.27 Bcf0 BB493.2676 458.6089 m492.8662 459.0122 492.374 459.1904 491.8369 459.1904 c491.2559 459.1904 490.8086 459.0122 490.4072 458.6089 c490.0049 458.207 489.7803 457.7598 489.8252 457.1777 c489.7803 456.5977 490.0049 456.1504 490.4072 455.749 c490.8086 455.3452 491.2559 455.167 491.8369 455.1216 c492.374 455.167 492.8662 455.3452 493.2676 455.749 c493.6709 456.1504 493.8486 456.5977 493.8486 457.1777 c493.8486 457.7598 493.6709 458.207 493.2676 458.6089 c493.2676 458.6089 lBb1 (Unnamed gradient 23) 489.8193 457.1563 0 4.0293 1 0 0 1 0 0 Bg4.0293 0 0 -8.06885 489.8193 461.1904 Xm8385.8584 0 0 -8.06885 -7896.0391 461.1904 Bc4.0293 0 0 -8.06885 489.8193 461.1904 Bm8385.8584 0 0 -8.06885 493.8486 461.1904 Bcf0 BB501.2705 456.105 m501.4941 456.374 501.6279 456.687 501.6279 457.0449 c501.6279 457.4014 501.4941 457.7158 501.2705 457.9395 c501.002 458.207 500.6895 458.3413 500.3311 458.3413 c499.9736 458.3413 499.6611 458.207 499.4375 457.9395 c499.1689 457.7158 499.0352 457.4014 499.0352 457.0449 c499.0352 456.687 499.1689 456.374 499.4375 456.105 c499.6611 455.8818 499.9736 455.749 500.3311 455.749 c500.6895 455.749 501.002 455.8818 501.2705 456.105 c501.2705 456.105 lBb1 (Unnamed gradient 17) 499.0352 457.0449 0 2.59277 1 0 0 1 0 0 Bg2.59277 0 0 -6.59229 499.0352 460.3413 Xm8395.0352 0 0 -6.59229 -7896 460.3413 Bc2.59277 0 0 -6.59229 499.0352 460.3413 Bm8395.0352 0 0 -6.59229 501.6279 460.3413 Bcf0 BB542.8916 460.9341 m542.5791 461.1577 542.2666 461.2466 541.9531 461.2031 c541.5957 461.1577 541.3271 460.9795 541.1035 460.7104 c540.8799 460.3975 540.791 460.085 540.835 459.7266 c540.8799 459.4141 541.0586 459.1016 541.3271 458.8779 c541.6396 458.6543 541.9531 458.6089 542.3105 458.6543 c542.623 458.6997 542.9365 458.8779 543.1602 459.145 c543.3838 459.4595 543.4736 459.7725 543.4287 460.085 c543.3838 460.4434 543.2051 460.7104 542.8916 460.9341 c542.8916 460.9341 lBb1 (Unnamed gradient 17) 540.8242 459.9263 0 2.61621 1 0 0 1 0 0 Bg2.61621 0 0 -6.6377 540.8242 463.2466 Xm8436.8574 0 0 -6.6377 -7896.0332 463.2466 Bc2.61621 0 0 -6.6377 540.8242 463.2466 Bm8436.8574 0 0 -6.6377 543.4404 463.2466 Bcf0 BB524.6514 453.2451 m524.4277 452.9761 524.3389 452.6636 524.3838 452.3052 c524.4277 451.9927 524.6074 451.6802 524.875 451.4561 c525.1885 451.2324 525.502 451.1875 525.8584 451.2324 c526.1719 451.2783 526.4844 451.4561 526.708 451.7256 c526.9316 452.0381 527.0215 452.3506 526.9766 452.6636 c526.9316 453.0215 526.7529 453.2891 526.4395 453.5127 c526.127 453.7363 525.8145 453.8252 525.501 453.7817 c525.1436 453.7363 524.875 453.5581 524.6514 453.2451 c524.6514 453.2451 lBb1 (Unnamed gradient 17) 524.3721 452.5049 0 2.61621 1 0 0 1 0 0 Bg2.61621 0 0 -6.6377 524.3721 455.8252 Xm8420.4053 0 0 -6.6377 -7896.0332 455.8252 Bc2.61621 0 0 -6.6377 524.3721 455.8252 Bm8420.4053 0 0 -6.6377 526.9883 455.8252 Bcf0 BB542.1758 524.3726 m542.1758 523.791 542.1758 523.2549 542.1318 522.6733 c541.7744 517.085 539.4941 512.5254 535.2471 509.0381 c533.8164 507.8311 532.208 506.8477 530.4189 506.0874 c528.7646 505.4165 526.9766 505.0596 525.1436 505.104 c515.7549 505.8193 509.0039 507.6519 504.9365 510.5581 c503.9531 511.2285 503.1035 511.8989 502.4326 512.5698 c499.1689 515.3862 499.2588 518.0244 502.7012 520.438 c504.8916 522.0029 507.2158 523.3887 509.5859 524.5513 c510.2119 524.9087 510.8379 525.2666 511.4629 525.6689 c516.0244 528.7534 518.5723 532.7769 519.1084 537.7397 c518.1689 536.4878 517.1855 535.3257 516.1572 534.2969 c511.1953 529.5137 505.4727 526.2949 498.9902 524.5513 c497.0234 523.9697 l497.1572 523.9697 497.3359 523.9697 497.4707 523.9697 c497.1572 523.9253 496.8896 523.8809 496.5762 523.8359 c495.9951 523.6123 l496.04 523.6572 496.1299 523.7017 496.2188 523.7466 c495.3691 523.6123 494.5645 523.4336 493.8486 523.2993 c492.9102 523.1206 491.9717 522.9419 491.0322 522.7183 c489.5576 522.4951 488.126 522.1816 486.6963 521.7793 c485.668 521.4663 484.6396 521.1533 483.6113 520.8853 c481.958 520.5723 480.3926 520.0806 478.8281 519.4102 c477.3076 518.6948 475.7432 517.979 474.0889 517.2642 c473.4639 516.9512 472.8369 516.6377 472.2559 516.2808 c470.6904 515.5205 469.2607 514.4922 467.9189 513.2852 c466.623 512.2124 465.3711 511.0947 464.1191 509.9771 c463.8955 509.7534 463.7168 509.5747 463.5381 509.3511 c459.7383 504.478 455.2676 500.2754 450.126 496.6543 c444.4043 492.6758 439.1738 489.5015 434.4795 487.0425 c433.0039 486.2827 431.6182 485.7012 430.3213 485.2993 c433.6748 485.7012 437.5635 486.5508 441.9893 487.8027 c450.1709 490.1274 456.7881 492.7202 461.9287 495.5366 c467.0254 498.3979 470.4678 499.8735 472.3008 500.0073 c473.418 500.0073 474.5361 500.0073 475.6533 499.9629 c476.9502 499.8735 478.2471 499.6499 479.543 499.2476 c480.4824 498.9795 481.376 498.5767 482.2256 498.04 c487.5898 494.5088 493.3125 491.6475 499.4375 489.4121 c504.624 487.5342 509.9883 486.2827 515.5322 485.6567 c520.8076 484.9858 526.6191 485.5225 533.0117 487.2661 c533.8613 487.5342 534.7109 487.7578 535.6045 487.9814 c540.7461 489.4121 545.6631 491.4683 550.3574 494.1064 c552.2354 495.1343 553.8447 496.4756 555.1865 498.04 c551.8779 496.5205 548.5254 495.2686 545.1729 494.2402 c541.1934 493.0332 537.1689 492.3628 533.0117 492.2285 c527.96 491.96 522.9971 492.4521 518.125 493.7036 c514.5928 494.6426 511.2842 496.0732 508.1553 498.04 c513.1182 497.1909 517.9902 497.1016 522.8633 497.8164 c526.6631 498.3535 530.0615 499.7393 533.0117 502.019 c535.292 504.1206 l535.5605 504.3887 535.8281 504.6567 536.0967 504.9248 c536.6777 505.5957 537.2148 506.2217 537.751 506.8921 c541.9082 512.0781 543.3838 517.8901 542.1758 524.3726 c542.1758 524.3726 lBb1 (Unnamed gradient 23) 491.6494 539.1865 -88.6672 75.5717 1 0 0 1 0 0 Bg1.75782 -75.5513 -129.093 -3.00355 556.1953 540.6885 Xm195.0502 -8383.2959 -129.093 -3.00355 361.1455 8923.9844 Bc1.75782 -75.5513 -129.093 -3.00355 556.1953 540.6885 Bm195.0502 -8383.2959 -129.093 -3.00355 557.9531 465.1372 Bcf0 BB478.0674 529.7817 m477.3525 531.5698 476.1904 532.6875 474.5811 533.1792 c472.9258 533.6709 471.3174 533.3584 469.7529 532.2407 c468.1875 531.123 467.0703 529.5137 466.4893 527.4121 c465.8184 525.311 465.8633 523.3887 466.5781 521.6006 c467.2939 519.7676 468.4561 518.605 470.1104 518.1133 c471.7197 517.6216 473.3291 517.979 474.9385 519.1416 c476.5029 520.2598 477.5762 521.8242 478.2471 523.9253 c478.8281 526.0264 478.7832 527.9487 478.0674 529.7817 c478.0674 529.7817 lBb1 (Unnamed gradient 23) 472.0254 538.73 -88.6672 75.5717 1 0 0 1 0 0 Bg1.75782 -75.5513 -17.0188 -0.395969 480.5283 538.9277 Xm194.5241 -8360.6836 -17.0188 -0.395969 286.0044 8899.6113 Bc1.75782 -75.5513 -17.0188 -0.395969 480.5283 538.9277 Bm194.5241 -8360.6836 -17.0188 -0.395969 482.2861 463.3765 Bcf0 BBU539.3604 703.9575 m537.9287 704.9858 536.499 705.2539 535.0234 704.8071 c533.5488 704.3599 532.4756 703.3315 531.8496 701.7222 c531.1787 700.0684 531.1338 698.3247 531.7148 696.4023 c532.252 694.5244 533.2354 693.0942 534.666 692.1104 c536.0967 691.0825 537.5723 690.769 539.0469 691.1714 c540.5225 691.6187 541.5508 692.647 542.2217 694.3008 c542.8467 695.9551 542.8916 697.6982 542.3105 699.5767 c541.7295 701.4541 540.7461 702.9292 539.3604 703.9575 c539.3604 703.9575 lBb1 (Unnamed gradient 9) 537.8916 716.8682 -92.6542 132.7963 1 0 0 1 0 0 Bg-6.14941 -132.6538 -15.8297 0.733814 545.8018 716.5015 Xm-390.0091 -8413.1895 -15.8297 0.733814 935.8105 9129.6914 Bc-6.14941 -132.6538 -15.8297 0.733814 545.8018 716.5015 Bm-390.0091 -8413.1895 -15.8297 0.733814 539.6523 583.8477 Bcf0 BB546.29 666.8066 m545.709 670.249 547.2734 674.8984 551.0732 680.71 c554.874 686.4771 558.8076 693.9883 562.876 703.1528 c560.7744 699.353 558.1367 695.9551 554.9629 692.9595 c551.0732 689.2939 546.5137 687.5503 541.3271 687.6846 c532.6094 688.1318 525.9033 692.3789 521.1201 700.4258 c509.0947 717.8608 504.7129 723.5391 508.0205 717.5039 c519.1973 690.8135 524.4727 669.3105 523.8467 653.0815 c523.1768 636.8535 524.3389 623.7988 527.334 613.9189 c527.6914 619.1943 528.8545 628.3594 530.8213 641.3687 c532.7881 654.3784 535.4258 659.3403 538.6895 656.2559 c543.6074 647.1357 546.5576 636.3169 547.4971 623.8442 c549.6436 635.2441 550.1338 644.4092 548.9717 651.2935 c547.7646 658.2231 546.8701 663.3643 546.29 666.8066 c546.29 666.8066 lBb1 (Unnamed gradient 9) 535.1719 716.9941 -92.6542 132.7963 1 0 0 1 0 0 Bg-6.14941 -132.6538 -62.9773 2.91943 565.4561 715.5903 Xm-390.6608 -8427.249 -62.9773 2.91943 956.1172 9142.8398 Bc-6.14941 -132.6538 -62.9773 2.91943 565.4561 715.5903 Bm-390.6608 -8427.249 -62.9773 2.91943 559.3066 582.9365 Bcf0 BB478.8721 704.8071 m477.3965 705.2539 475.9219 704.9858 474.4912 703.9575 c473.0605 702.9297 472.0771 701.4541 471.541 699.5767 c470.96 697.6987 471.0049 695.9551 471.6299 694.3008 c472.3008 692.647 473.3291 691.6187 474.8047 691.1714 c476.2793 690.769 477.7549 691.0825 479.1855 692.1104 c480.5713 693.0942 481.5547 694.5244 482.1357 696.4023 c482.7178 698.3247 482.6729 700.0684 482.002 701.7222 c481.376 703.3315 480.3477 704.3599 478.8721 704.8071 c478.8721 704.8071 lBb1 (Unnamed gradient 17) 479.0879 719.7563 -95.9066 76.8381 1 0 0 1 0 0 Bg-7.90723 -76.4302 -15.5488 1.60863 486.8643 718.9517 Xm-860.3577 -8316.1025 -15.5488 1.60863 1347.2217 9035.0547 Bc-7.90723 -76.4302 -15.5488 1.60863 486.8643 718.9517 Bm-860.3577 -8316.1025 -15.5488 1.60863 478.957 642.5215 Bcf0 BB462.7783 680.71 m466.5781 674.8984 468.1426 670.249 467.5615 666.8066 c466.9355 663.3643 466.042 658.2231 464.8789 651.2935 c463.6719 644.4092 464.1641 635.2441 466.3545 623.8442 c467.2939 636.3169 470.2441 647.1357 475.207 656.2559 c478.4707 659.3403 481.0635 654.3784 483.0303 641.3687 c484.9531 628.3594 486.1143 619.1943 486.5176 613.9189 c489.5127 623.7988 490.6748 636.8535 490.0049 653.0815 c489.333 669.3105 494.6094 690.8135 505.8311 717.5039 c509.1387 723.5391 504.7568 717.8608 492.7314 700.4258 c487.9482 692.3789 481.2422 688.1318 472.5244 687.6846 c467.3379 687.5503 462.7783 689.2939 458.8887 692.9595 c455.6699 695.9551 453.0322 699.353 450.9756 703.1528 c455.0439 693.9883 458.9775 686.4771 462.7783 680.71 c462.7783 680.71 lBb1 (Unnamed gradient 17) 479.7881 719.6836 -95.9066 76.8381 1 0 0 1 0 0 Bg-7.90723 -76.4302 -59.4396 6.14943 510.4229 716.5142 Xm-862.6375 -8338.1387 -59.4396 6.14943 1373.0605 9054.6523 Bc-7.90723 -76.4302 -59.4396 6.14943 510.4229 716.5142 Bm-862.6375 -8338.1387 -59.4396 6.14943 502.5156 640.084 Bcf0 BB508.8711 658.3125 m509.2725 659.6089 509.2275 660.8159 508.7803 661.9336 c508.3789 663.0513 507.6631 663.7222 506.6357 664.0347 c505.6074 664.3477 504.624 664.124 503.6396 663.4536 c502.7012 662.7383 502.0303 661.7549 501.6729 660.4585 c501.2705 659.1616 501.3145 657.9995 501.7178 656.8818 c502.165 655.7642 502.8799 655.0488 503.9082 654.7363 c504.9365 654.4229 505.9199 654.6465 506.8594 655.3618 c507.7969 656.0322 508.4678 657.0161 508.8711 658.3125 c508.8711 658.3125 lBb1 (Unnamed gradient 23) 505.8369 674.7314 -92.1213 71.208 1 0 0 1 0 0 Bg-2.63574 -71.1592 -11.9713 0.443417 511.8262 674.5098 Xm-310.6067 -8385.7012 -11.9713 0.443417 822.4326 9060.2109 Bc-2.63574 -71.1592 -11.9713 0.443417 511.8262 674.5098 Bm-310.6067 -8385.7012 -11.9713 0.443417 509.1904 603.3506 Bcf0 BB520.3604 667.3433 m521.9248 670.249 519.8232 667.522 514.0566 659.1616 c511.0156 655.3618 507.8428 653.4844 504.5332 653.4844 c501.1807 653.4844 498.0068 655.6748 494.9219 660.0557 c491.8828 664.4819 491.4355 664.5264 493.626 660.2349 c495.8154 655.9429 497.4707 652.769 498.5879 650.7573 c499.7061 648.7007 500.3311 646.5991 500.5547 644.4092 c500.7783 642.2632 500.6895 639.4014 500.3311 635.8696 c499.9736 632.3384 500.3311 627.8228 501.3604 622.3237 c501.8066 628.3594 503.2373 633.5454 505.6074 637.9263 c507.1719 639.4014 508.4678 637.0322 509.4072 630.7734 c510.3457 624.5146 510.8828 620.1333 511.0615 617.585 c512.4912 622.3237 512.9385 628.8062 512.3574 637.0771 c511.7764 645.3477 514.459 655.4063 520.3604 667.3433 c520.3604 667.3433 lBb1 (Unnamed gradient 23) 506.8857 674.6924 -92.1213 71.208 1 0 0 1 0 0 Bg-2.63574 -71.1592 -34.2334 1.268 524.0664 674.0562 Xm-310.8861 -8393.2461 -34.2334 1.268 834.9521 9067.3027 Bc-2.63574 -71.1592 -34.2334 1.268 524.0664 674.0562 Bm-310.8861 -8393.2461 -34.2334 1.268 521.4307 602.897 Bcf0 BB270.2109 320.6016 m271.5967 320.6016 272.7139 321.2266 273.6084 322.4795 c274.5469 323.6846 275.0391 325.1152 275.0391 326.8594 c274.9941 328.6025 274.502 330.0791 273.5635 331.2861 c272.625 332.4932 271.4629 333.0732 270.1211 333.0732 c268.7354 333.0303 267.5723 332.4023 266.6338 331.1973 c265.6953 329.9902 265.248 328.5137 265.248 326.7705 c265.293 325.0264 265.7842 323.5957 266.7236 322.3887 c267.6621 321.1816 268.8242 320.5557 270.2109 320.6016 c270.2109 320.6016 lBb1 (Unnamed gradient 17) 267.0566 344.1377 -79.895 90.1266 1 0 0 1 0 0 Bg15.813 -88.7285 -13.9588 -2.4877 274.0356 345.3818 Xm1430.2637 -8025.3735 -13.9588 -2.4877 -1156.228 8370.7559 Bc15.813 -88.7285 -13.9588 -2.4877 274.0356 345.3818 Bm1430.2637 -8025.3735 -13.9588 -2.4877 289.8486 256.6533 Bcf0 BBu329.3311 361.9668 m328.123 362.6377 326.8271 362.7275 325.3965 362.1904 c323.9209 361.6543 322.7578 360.6709 321.8643 359.1963 c321.0146 357.6768 320.6572 356.1563 320.8369 354.6807 c320.9697 353.1162 321.6406 351.998 322.8486 351.2822 c323.9658 350.6133 325.2617 350.5225 326.7373 351.0586 c328.168 351.5947 329.3311 352.5781 330.2695 354.0547 c331.1191 355.5742 331.4756 357.0947 331.2979 358.6143 c331.1631 360.1348 330.4922 361.2529 329.3311 361.9668 c329.3311 361.9668 lBb1 (Unnamed gradient 23) 332.8096 385.582 -103.1092 65.8495 1 0 0 1 0 0 Bg-14.9352 -64.1334 -13.9509 3.24884 339.7852 383.958 Xm-1861.0477 -7991.564 -13.9509 3.24884 2200.833 8375.5215 Bc-14.9352 -64.1334 -13.9509 3.24884 339.7852 383.958 Bm-1861.0477 -7991.564 -13.9509 3.24884 324.8496 319.8242 Bcf0 BB307.29 353.877 m308.4971 349.4492 309.2129 345.248 309.5254 341.1787 c309.749 337.1104 307.2451 332.3271 302.1035 326.918 c296.9189 321.5088 291.9121 315.6963 287.083 309.5713 c292.2246 312.5674 297.2764 315.7861 302.1943 319.1387 c305.3682 321.375 308.7207 322.9834 312.1631 324.0127 c319.0928 326.1123 324.5918 324.0566 328.6602 317.8418 c329.4639 316.5908 330.3145 315.2041 331.252 313.7295 c332.8174 311.0479 334.3818 308.2754 335.9023 305.459 c338.1816 301.123 340.2393 296.6963 342.1611 292.1816 c343.1895 289.8564 344.3066 287.8887 345.5146 286.2803 c345.3799 287.665 345.2012 288.9619 344.9326 290.2148 c343.9941 294.5049 342.9209 298.752 341.7139 302.999 c340.6855 306.8008 339.6123 310.5557 338.4053 314.1768 c337.1094 318.1113 335.7227 322.0459 334.248 325.9346 c332.7734 330.2705 332.1025 333.3994 332.3262 335.2334 c332.5498 337.6025 334.1582 340.6885 337.1543 344.4424 c340.1494 348.1533 345.0225 353.2949 351.7285 359.8213 c345.291 355.7529 340.2832 352.8926 336.707 351.2383 c334.5166 350.21 332.3262 349.4492 330.0908 348.8691 c323.4287 347.3037 317.6621 349.0479 312.834 354.1006 c309.5703 357.4961 306.2178 363.8906 302.6855 373.3232 c304.5625 364.7832 306.083 358.3018 307.29 353.877 c307.29 353.877 lBb1 (Unnamed gradient 23) 336.5107 384.7178 -103.1092 65.8469 1 0 0 1 0 0 Bg-14.9346 -64.1309 -64.4655 15.0125 368.7432 377.2119 Xm-1862.9395 -7999.6875 -64.4655 15.0125 2231.6826 8376.8994 Bc-14.9346 -64.1309 -64.4655 15.0125 368.7432 377.2119 Bm-1862.9395 -7999.6875 -64.4655 15.0125 353.8086 313.0811 Bcf0 BB286.6807 344.8447 m283.417 338.0049 280.6904 332.9541 278.499 329.6455 c277.2031 327.6328 275.7275 325.8457 274.1182 324.1904 c269.335 319.2725 263.5225 317.708 256.6826 319.4971 c252.1675 320.6582 245.9531 324.2803 237.9956 330.4053 c244.0757 324.1455 248.8145 319.4512 252.1675 316.3223 c255.4756 313.2373 258.3364 310.0186 260.7061 306.71 c263.0762 303.4033 263.4785 298.083 261.958 290.751 c260.3936 283.4639 259.186 275.9082 258.3364 268.1279 c261.1533 273.4043 263.7461 278.7695 266.1162 284.1787 c267.6807 287.7549 269.6475 290.8857 272.0166 293.5674 c276.8008 298.9756 282.5674 300.1396 289.3184 297.0537 c290.6592 296.4287 292.0898 295.7119 293.6094 294.9092 c296.4268 293.4326 299.1982 291.9121 301.9258 290.3037 c306.1279 287.8438 310.2402 285.251 314.2637 282.4346 c316.3662 280.96 318.3779 279.8428 320.21 279.126 c319.4053 280.2441 318.5566 281.2734 317.6621 282.168 c314.5781 285.3398 311.4033 288.3818 308.1846 291.376 c305.2783 294.0146 302.373 296.5615 299.4668 299.1104 c296.292 301.748 293.0293 304.2969 289.7656 306.8447 c286.1445 309.75 283.998 312.0752 283.2383 313.7295 c282.165 315.875 281.8975 319.3184 282.4785 324.1016 c283.0146 328.8398 284.4004 335.7705 286.6807 344.8447 c286.6807 344.8447 lBb1 (Unnamed gradient 17) 271.5195 347.3164 -79.895 90.1266 1 0 0 1 0 0 Bg15.813 -88.7285 -74.7639 -13.3242 308.9014 353.9785 Xm1432.1234 -8035.8086 -74.7639 -13.3242 -1123.2222 8389.7871 Bc15.813 -88.7285 -74.7639 -13.3242 308.9014 353.9785 Bm1432.1234 -8035.8086 -74.7639 -13.3242 324.7148 265.25 Bcf0 BB320.166 280.4238 m326.1113 280.4678 332.0576 280.7363 338.0039 281.2275 c341.8926 281.54 345.5586 281.3164 349.0908 280.4678 c356.1094 278.8135 359.8643 274.2988 360.3115 266.8779 c360.3564 265.4014 360.4014 263.8379 360.4463 262.0938 c360.4912 258.9639 360.4912 255.791 360.4014 252.5713 c360.2227 247.7422 359.8643 242.8701 359.2832 237.9971 c358.9707 235.4482 358.9707 233.168 359.1943 231.2012 c359.7754 232.4082 360.2676 233.6611 360.6699 234.8682 c361.9658 239.1152 363.1738 243.3174 364.291 247.5645 c365.2295 251.3643 366.124 255.1201 366.9287 258.9199 c367.7334 262.9883 368.4932 267.0557 369.1641 271.125 c370.0127 275.6387 370.9971 278.6807 372.1143 280.1553 c373.5 282.0771 376.4512 283.9551 380.877 285.6982 c385.3027 287.4873 392.0986 289.5439 401.1729 291.8232 c393.5732 291.5107 387.8066 291.5107 383.917 291.8691 c381.502 292.0928 379.1777 292.4941 376.9873 293.1201 c370.3711 295.042 366.2578 299.3799 364.6035 306.2188 c363.4863 310.7793 363.7539 318.0225 365.3633 327.9453 c362.7266 319.5859 360.8037 313.1934 359.6865 308.7666 c358.5234 304.3408 357.0479 300.3174 355.2598 296.6523 c353.4717 293.0303 349.001 290.125 341.8037 287.9785 c334.6055 285.8779 327.4082 283.3291 320.166 280.4238 c320.166 280.4238 lBb1 (Unnamed gradient 9) 374.7324 335.3447 -105.9457 121.5165 1 0 0 1 0 0 Bg-33.3838 -116.8408 -75.7283 21.6371 412.5967 324.5264 Xm-2269.5273 -7943.1792 -75.7283 21.6371 2682.124 8267.7051 Bc-33.3838 -116.8408 -75.7283 21.6371 412.5967 324.5264 Bm-2269.5273 -7943.1792 -75.7283 21.6371 379.2129 207.6855 Bcf0 BB379.5352 306.9795 m378.0156 307.2021 376.4951 306.9336 374.9756 306.085 c373.4561 305.2354 372.3828 304.1172 371.8008 302.7324 c371.2197 301.3008 371.2197 300.0049 371.8906 298.7979 c372.5166 297.6357 373.5898 296.9199 375.1543 296.6963 c376.6299 296.4287 378.1494 296.6963 379.6699 297.5449 c381.1895 298.3955 382.2627 299.5127 382.8438 300.9434 c383.4248 302.3301 383.4248 303.626 382.7988 304.834 c382.1289 306.041 381.0557 306.7559 379.5352 306.9795 c379.5352 306.9795 lBb1 (Unnamed gradient 9) 385.9795 332.1318 -105.9457 121.5165 1 0 0 1 0 0 Bg-33.3838 -116.8408 -14.8576 4.24511 393.4121 330.0078 Xm-2268.2043 -7938.5479 -14.8576 4.24511 2661.6162 8268.5557 Bc-33.3838 -116.8408 -14.8576 4.24511 393.4121 330.0078 Bm-2268.2043 -7938.5479 -14.8576 4.24511 360.0283 213.167 Bcf0 BBUu1 g322.7383 634.2124 m327.2529 636.1353 330.875 639.2646 333.6025 643.6011 c336.3291 647.937 338.2959 652.0059 339.5928 655.8062 c337.3574 651.5142 334.4512 647.9824 330.9199 645.1655 c327.835 642.7065 324.2578 641.4551 320.1904 641.4551 c317.8203 641.7681 314.959 643.2881 311.6514 646.0601 c308.3867 648.8765 303.8271 651.4692 297.9717 653.8389 c289.0742 657.5044 280.4912 656.208 272.3096 649.9043 c267.8389 646.4624 263.8599 642.394 260.418 637.6104 c258.0034 634.2573 255.813 630.7256 253.8906 626.9702 c258.2271 631.7534 263.0552 635.688 268.4199 638.7729 c273.8291 641.8125 279.418 643.333 285.2744 643.333 c288.4482 643.333 291.5781 642.6177 294.5732 641.2319 c299.5361 638.9517 304.3193 636.7612 308.9238 634.5703 c313.6182 632.4243 318.2227 632.2905 322.7383 634.2124 c322.7383 634.2124 lf293.5 689.291 m292.0254 689.9614 290.5049 689.8271 288.8955 688.978 c287.2412 688.1284 285.9453 686.7871 285.0957 684.9546 c284.2461 683.0767 284.0225 681.2437 284.4697 679.4556 c284.8721 677.667 285.8105 676.4155 287.2861 675.7002 c288.7617 675.0293 290.2813 675.1191 291.9355 675.9683 c293.5449 676.8174 294.7969 678.2036 295.6904 680.0815 c296.54 681.9141 296.8086 683.7471 296.4063 685.5352 c295.9141 687.3687 294.9756 688.6201 293.5 689.291 c293.5 689.291 lf320.5918 674.0459 m324.1689 674.4932 327.5215 673.8223 330.6064 672.0786 c324.124 677.1309 316.7471 678.9639 308.5664 677.4883 c303.6484 676.5493 298.9092 675.2085 294.3047 673.4648 c286.7051 670.6035 279.6416 671.3188 273.1143 675.6108 c270.0293 677.6226 267.4365 680.126 265.3354 683.1216 c266.9893 678.1143 269.8506 673.8672 274.0088 670.4248 c278.2998 666.8931 283.2178 665.1045 288.7617 665.1045 c294.4395 665.1045 299.8037 666.4907 304.9004 669.2173 c309.7734 671.8105 315.0039 673.4199 320.5918 674.0459 c320.5918 674.0459 lfU158.897 540.6455 m145.7085 559.1982 130.2847 568.7212 112.7153 569.168 c94.9219 569.6152 82.4492 560.6294 75.2515 542.2549 c69.082 526.3843 69.3057 508.8594 75.9668 489.5908 c81.5103 473.5405 90.2729 460.6211 102.2095 450.7422 c112.894 441.9785 123.8921 437.5967 135.2471 437.5967 c146.5581 437.5967 155.9468 441.9336 163.4121 450.6074 c171.7725 460.2197 175.9302 472.915 175.9302 488.6069 c175.9302 507.3838 170.252 524.73 158.897 540.6455 c158.897 540.6455 lBb1 (Unnamed gradient 9) 115.4424 554.6455 -81.1194 170.7189 1 0 0 1 0 0 Bg26.355 -168.6724 -107.8106 -16.8454 169.2563 563.0537 Xm1239.5507 -7933.145 -107.8106 -16.8454 -1070.2944 8496.1992 Bc26.355 -168.6724 -107.8106 -16.8454 169.2563 563.0537 Bm1239.5507 -7933.145 -107.8106 -16.8454 195.6113 394.3818 Bcf0 BB1 g127.2896 544.3115 m125.9038 545.8315 124.2939 546.502 122.5059 546.3677 c120.7178 546.2334 119.2427 545.3398 118.125 543.6406 c116.9624 541.9419 116.4707 539.9302 116.6494 537.6499 c116.7837 535.3701 117.5435 533.4927 118.9292 531.9727 c120.3154 530.4077 121.8804 529.6924 123.6685 529.8262 c125.457 529.9609 126.9321 530.8994 128.0942 532.5986 c129.2119 534.2969 129.7036 536.2642 129.5698 538.5439 c129.3906 540.8242 128.6309 542.7466 127.2896 544.3115 c127.2896 544.3115 lf126.9766 528.8877 m124.0708 528.7534 121.7017 528.3066 119.7788 527.6357 c118.0801 526.9648 116.6494 525.8926 115.5317 524.5063 c111.0166 519.0078 108.6919 512.5249 108.6475 505.1484 c108.6475 504.8359 108.6475 504.478 108.6475 504.1206 c108.6475 500.4097 108.6475 498.3535 108.6919 497.9063 c109.4517 488.9204 110.9717 479.9785 113.252 471.1719 c115.353 462.9014 117.0073 454.5854 118.1694 446.1367 c119.4663 456.6416 120.8965 467.1938 122.3721 477.6987 c122.8638 481.2749 123.6235 484.8071 124.6519 488.2495 c126.4849 481.6328 128.1392 474.3462 129.5698 466.3428 c130.9556 458.3413 131.7603 451.0088 131.894 444.3477 c132.3413 446.584 132.6992 448.8184 132.9673 451.0986 c134.4429 464.2866 134.4873 477.5205 133.1016 490.7979 c132.9229 492.3628 132.7437 493.8828 132.5649 495.4028 c132.4756 496.0283 132.3857 496.6543 132.3413 497.2803 c132.2075 497.9507 132.1177 498.6216 131.9839 499.3369 c131.939 499.5601 131.939 499.7393 131.894 499.9629 c131.8052 500.3203 131.7153 500.6777 131.6709 500.9912 c130.8213 505.7744 131.626 510.29 134.085 514.4922 c136.0967 516.7725 140.2993 517.6665 146.6919 517.2192 c154.6055 516.7275 165.6475 514.8945 179.7749 511.7651 c171.146 514.9395 165.0664 517.3535 161.4897 518.9629 c155.812 521.6006 150.0898 523.9253 144.2329 525.9819 c137.4824 528.2168 131.7153 529.2002 126.9766 528.8877 c126.9766 528.8877 lf104.1313 499.5601 m104.1768 500.0073 104.355 502.064 104.6235 505.73 c104.6685 506.0874 104.6685 506.4453 104.6685 506.7578 c105.1152 514.1343 103.2827 520.7515 99.1694 526.6079 c98.1411 528.083 96.7549 529.2002 95.1011 530.0054 c93.2681 530.8101 90.8984 531.3911 88.0376 531.749 c83.3438 532.375 77.5317 531.7935 70.6021 530.0498 c64.6113 528.396 58.7104 526.4736 52.854 524.2383 c49.1431 522.897 42.9287 520.9302 34.1216 518.3369 c48.4277 520.4829 59.5596 521.5557 67.562 521.5112 c73.9551 521.4663 78.0679 520.2598 79.9453 517.8901 c82.0913 513.5088 82.583 508.9487 81.4209 504.21 c81.3315 503.897 81.2422 503.5391 81.1528 503.2266 c81.1084 503.0029 81.0186 502.8242 80.9736 502.6006 c80.7949 501.8853 80.6162 501.2148 80.4819 500.5889 c80.3926 499.9629 80.2588 499.3369 80.1245 498.666 c79.8115 497.1909 79.5435 495.6709 79.2749 494.1509 c76.9502 480.9619 76.0562 467.7734 76.6377 454.4961 c76.7266 452.2163 76.9502 449.9365 77.2632 447.6563 c77.8442 454.3179 79.1411 461.605 81.1084 469.4736 c83.0747 477.3403 85.2212 484.4941 87.5454 490.9766 c88.3057 487.4448 88.8423 483.9131 89.1104 480.291 c89.8262 469.6973 90.4966 459.1016 91.1221 448.5059 c92.8657 456.8652 95.0566 465.0918 97.7388 473.1841 c100.6001 481.812 102.7456 490.6191 104.1313 499.5601 c104.1313 499.5601 lBb1 (Unnamed gradient 17) 34.1216 489.8247 0 70.6128 1 0 0 1 0 0 Bg70.6128 0 0 -88.7188 34.1216 534.375 Xm7930.1216 0 0 -88.7188 -7896 534.375 Bc70.6128 0 0 -88.7188 34.1216 534.375 Bm7930.1216 0 0 -88.7188 104.7344 534.375 Bcf0 BB98.9458 539.7959 m99.2588 542.0762 98.9009 544.1323 97.873 545.876 c96.8447 547.6646 95.459 548.6924 93.7153 548.916 c91.9268 549.1396 90.2729 548.5586 88.7974 547.1729 c87.3223 545.7417 86.4731 543.8643 86.1597 541.5845 c85.8472 539.3042 86.1597 537.2925 87.188 535.5488 c88.2163 533.7607 89.6025 532.7324 91.3906 532.5088 c93.1787 532.2852 94.7881 532.8667 96.2632 534.2969 c97.7388 535.6826 98.6328 537.5161 98.9458 539.7959 c98.9458 539.7959 lBb1 (Unnamed gradient 17) 86.0439 540.7124 0 13.0117 1 0 0 1 0 0 Bg13.0117 0 0 -20.8545 86.0439 551.1396 Xm7982.2407 0 0 -20.8545 -7896.1968 551.1396 Bc13.0117 0 0 -20.8545 86.0439 551.1396 Bm7982.2407 0 0 -20.8545 99.0557 551.1396 Bcf0 BBu545.7842 353.2305 m541.2695 357.7461 536.3066 361.2793 530.9414 363.7822 c524.2363 366.9551 516.8594 368.5205 508.8574 368.5205 c494.417 368.5205 482.1221 363.4238 471.8848 353.2305 c461.6914 342.9932 456.5957 330.6992 456.5957 316.2598 c456.5957 309.1504 457.8477 302.5781 460.3066 296.499 c462.8545 290.2393 466.6992 284.5176 471.8848 279.332 c482.1221 269.0928 494.417 263.9971 508.8574 263.9971 c523.2979 263.9971 535.5918 269.0928 545.7842 279.3311 c556.0225 289.5244 561.1191 301.8184 561.1191 316.2598 c561.1191 330.6992 556.0225 342.9932 545.7842 353.2305 c545.7842 353.2305 lBb1 (Unnamed gradient 23) 518.9404 376.7549 -99.4623 154.9672 1 0 0 1 0 0 Bg-25.4764 -152.8587 -110.3278 18.388 574.1035 367.5615 Xm-1382.0161 -8292.0977 -110.3278 18.388 1956.1191 8659.6592 Bc-25.4764 -152.8587 -110.3278 18.388 574.1035 367.5615 Bm-1382.0161 -8292.0977 -110.3278 18.388 548.627 214.7031 Bcf0 BB525.1748 334.499 m523.834 335.7061 522.3145 336.1982 520.6152 336.0635 c518.8711 335.9297 517.4854 335.126 516.3682 333.6953 c515.2949 332.3076 514.8477 330.6553 514.9814 328.7773 c515.1602 326.8994 515.9209 325.3789 517.2168 324.1719 c518.5586 322.9648 520.0781 322.4287 521.8223 322.5625 c523.5215 322.7412 524.9063 323.5459 525.9805 324.9316 c527.0977 326.3623 527.5449 328.0166 527.4102 329.8496 c527.2314 331.7275 526.4707 333.291 525.1748 334.499 c525.1748 334.499 lBb1 (Unnamed gradient 17) 520.2471 364.4463 -88.452 65.0278 1 0 0 1 0 0 Bg1.75671 -65.0041 -16.6145 -0.449001 528.5547 364.6709 Xm226.5984 -8384.8916 -16.6145 -0.449001 301.9561 8749.5625 Bc1.75671 -65.0041 -16.6145 -0.449001 528.5547 364.6709 Bm226.5984 -8384.8916 -16.6145 -0.449001 530.3115 299.667 Bcf0 BB541.3584 340.9814 m541.3135 340.4004 541.2246 339.7744 541.1348 339.1924 c539.6592 330.0283 534.6523 323.6357 526.1133 320.0137 c523.834 318.9863 521.5098 318.1816 519.1396 317.6445 c503.582 315.0957 491.5107 306.6016 482.9727 292.252 c489.0967 297.9297 496.1611 301.6836 504.208 303.6074 c509.6172 304.8145 512.4336 303.4277 512.6123 299.5381 c513.4619 279.0635 508.9463 259.4824 499.1563 240.751 c502.2402 244.1465 505.1025 247.6338 507.8291 251.2119 c518.291 265.0693 524.2363 278.7939 525.7109 292.4297 c529.7803 278.6611 530.4951 263.1934 527.8125 246.0254 c533.3564 262.5664 535.7705 279.5537 535.0107 296.9893 c534.8311 301.3711 535.7256 305.4404 537.6475 309.2402 c542.7891 319.4336 543.9961 330.0283 541.3584 340.9814 c541.3584 340.9814 lBb1 (Unnamed gradient 17) 511.4141 364.2109 -88.452 65.0325 1 0 0 1 0 0 Bg1.75684 -65.0088 -65.9974 -1.78355 545.0488 365.1201 Xm226.475 -8380.3252 -65.9974 -1.78355 318.5742 8745.4453 Bc1.75684 -65.0088 -65.9974 -1.78355 545.0488 365.1201 Bm226.475 -8380.3252 -65.9974 -1.78355 546.8057 300.1113 Bcf0 BB1 g541.1797 340.8018 m539.8389 342.9492 538.2295 344.96 536.3955 346.8379 c529.5117 353.8574 521.0176 357.2539 510.958 357.0322 c500.8994 356.8086 492.1816 353.0518 484.8047 345.6758 c477.4287 338.3438 473.5391 329.5811 473.1367 319.4336 c473.0918 317.1523 473.1816 314.9629 473.4951 312.8613 c473.5391 312.1904 473.6738 311.5654 473.8076 310.9385 c475.0146 304.4111 478.0986 298.6445 482.9727 293.6826 c483.1514 293.8174 l481.2285 297.0352 479.9326 300.5225 479.2168 304.2783 c479.083 304.9033 478.9492 305.5293 478.9043 306.2002 c478.5908 308.3018 478.502 310.4922 478.5908 312.7725 c478.9492 322.9209 482.8379 331.6826 490.2148 339.0146 c497.5918 346.3906 506.3096 350.1465 516.3682 350.3701 c526.1582 350.5938 534.4287 347.374 541.1797 340.8018 c541.1797 340.8018 lfUu88.6924 299.3096 m89.4521 299.043 90.2573 298.7295 91.0171 298.417 c95.3535 296.9404 98.9746 294.3936 101.7915 290.8154 c101.8804 290.6377 101.9702 290.459 102.104 290.3252 c104.1611 287.3291 104.4292 284.1104 102.9092 280.7578 c98.7515 271.5039 91.9111 264.5303 82.4336 259.79 c80.6455 258.8516 78.9907 258.2705 77.4712 258.0469 c74.3418 258.0918 71.436 258.6719 68.7534 259.79 c67.9932 260.1484 l66.5181 260.8633 65.1318 261.7568 63.8359 262.7861 c59.3203 266.3623 55.6099 270.877 52.7485 276.377 c54.4028 271.5479 56.9507 266.3623 60.3931 260.8193 c63.8359 255.3193 68.4404 251.2959 74.252 248.8379 c80.0195 246.3779 85.876 246.5576 91.8218 249.2832 c97.7231 252.0557 103.8477 254.918 110.1514 257.8232 c113.9961 259.5664 117.9751 260.416 122.043 260.416 c129.5093 260.4609 136.6626 258.5391 143.5024 254.6484 c150.3423 250.7598 156.5562 245.707 162.0557 239.582 c159.5967 244.3672 156.8252 248.8818 153.7402 253.1289 c149.314 259.2539 144.2173 264.4844 138.54 268.8662 c138.0483 269.2676 137.5566 269.626 137.0645 269.9844 c127.0503 277.5381 l127.2739 278.1201 127.4526 278.7021 127.6763 279.2383 c129.1963 283.1729 131.3423 286.7031 134.1138 289.8779 c136.1255 292.1572 138.0928 294.3936 140.0601 296.6279 c141.8481 298.7295 143.5469 301.0098 145.1113 303.3789 c147.9727 307.9844 149.6719 313.2578 150.2529 319.1602 c145.6484 311.291 141.2671 306.0166 137.1094 303.3789 c135.9019 302.6641 134.6953 301.9932 133.4434 301.3682 c129.9565 299.8027 126.29 298.9971 122.4453 298.9531 c122.043 298.9531 121.6855 298.9531 121.2832 298.9531 c117.7959 299.043 114.2192 299.7568 110.5537 301.1445 c104.6528 303.3789 98.5728 305.0771 92.3135 306.2842 c81.8076 308.1182 72.4639 305.793 64.1934 299.3096 c68.1724 301.5898 72.4194 302.4404 76.979 301.9043 c81.0029 301.457 84.8926 300.6084 88.6924 299.3096 c88.6924 299.3096 lBb1 (Unnamed gradient 9) 119.5225 338.1123 -98.6013 105.7318 1 0 0 1 0 0 Bg-15.8131 -104.5426 -116.2586 17.5852 177.6523 329.3193 Xm-1196.6743 -7911.3872 -116.2586 17.5852 1374.3262 8240.707 Bc-15.8131 -104.5426 -116.2586 17.5852 177.6523 329.3193 Bm-1196.6743 -7911.3872 -116.2586 17.5852 161.8394 224.7764 Bcf0 BB112.9678 318.6689 m111.314 317.9092 110.1963 316.5215 109.7041 314.4658 c109.2568 312.4541 109.5259 310.3525 110.5093 308.251 c111.4922 306.1055 112.9233 304.54 114.7563 303.6025 c116.5889 302.6641 118.3774 302.5732 120.0313 303.335 c121.6855 304.0947 122.7588 305.5244 123.2061 307.5371 c123.6973 309.5928 123.4292 311.6943 122.4902 313.7959 c121.5068 315.8965 120.0762 317.4619 118.1982 318.3994 c116.3657 319.3398 114.6221 319.4287 112.9678 318.6689 c112.9678 318.6689 lBb1 (Unnamed gradient 9) 120.5381 337.959 -98.6013 105.7344 1 0 0 1 0 0 Bg-15.8135 -104.5452 -18.4957 2.79765 129.7988 336.5586 Xm-1196.0948 -7907.5557 -18.4957 2.79765 1325.8936 8244.1143 Bc-15.8135 -104.5452 -18.4957 2.79765 129.7988 336.5586 Bm-1196.0948 -7907.5557 -18.4957 2.79765 113.9854 232.0137 Bcf0 BBU1 Ap157.6016 592.9131 m157.6016 588.0615 134.5923 584.1284 106.2095 584.1284 c77.8262 584.1284 54.8169 588.0615 54.8169 592.9131 c54.8169 597.7651 77.8262 601.6982 106.2095 601.6982 c134.5923 601.6982 157.6016 597.7651 157.6016 592.9131 cBb0 0 0 0 Bh1 (Unnamed gradient 31) 165.3262 1013.1553 -94.2792 64.7508 0.806896 0 0 0.137929 1496.9791 6970.8882 Bg-3.89855 -8.90614 -52.1015 0.666412 106.209 592.9131 Bmf0 BB376.5264 592.9131 m376.5264 588.0615 345.4531 584.1284 307.124 584.1284 c268.7954 584.1284 237.7231 588.0615 237.7231 592.9131 c237.7231 597.7651 268.7954 601.6982 307.124 601.6982 c345.4531 601.6982 376.5264 597.7651 376.5264 592.9131 cBb0 0 0 0 Bh1 (Unnamed gradient 31) 396.1855 1013.1553 -94.2792 64.7508 1.08965 0 0 0.137929 -832.2218 6970.8882 Bg-5.26471 -8.90614 -70.3593 0.666412 307.124 592.9131 Bmf0 BB561.7129 592.9131 m561.7129 588.0615 536.8457 584.1284 506.1709 584.1284 c475.4961 584.1284 450.6289 588.0615 450.6289 592.9131 c450.6289 597.7651 475.4961 601.6982 506.1709 601.6982 c536.8457 601.6982 561.7129 597.7651 561.7129 592.9131 cBb0 0 0 0 Bh1 (Unnamed gradient 31) 655.8633 1013.1553 -94.2792 64.7508 0.872045 0 0 0.137929 944.1812 6970.8882 Bg-4.21332 -8.90614 -56.3082 0.666412 506.1719 592.9131 Bmf0 BB561.7129 418.9697 m561.7129 414.1182 536.8457 410.1846 506.1709 410.1846 c475.4961 410.1846 450.6289 414.1182 450.6289 418.9697 c450.6289 423.8213 475.4961 427.7544 506.1709 427.7544 c536.8457 427.7544 561.7129 423.8213 561.7129 418.9697 cBb0 0 0 0 Bh1 (Unnamed gradient 31) 655.8633 -247.9541 -94.2792 64.7508 0.872045 0 0 0.137929 944.1812 6970.8882 Bg-4.21332 -8.90614 -56.3082 0.666412 506.1719 418.9697 Bmf0 BB362.293 418.9697 m362.293 414.1182 337.4258 410.1846 306.751 410.1846 c276.0762 410.1846 251.209 414.1182 251.209 418.9697 c251.209 423.8213 276.0762 427.7544 306.751 427.7544 c337.4258 427.7544 362.293 423.8213 362.293 418.9697 cBb0 0 0 0 Bh1 (Unnamed gradient 31) 427.1816 -247.9541 -94.2792 64.7508 0.872045 0 0 0.137929 944.1812 6970.8882 Bg-4.21332 -8.90614 -56.3082 0.666412 306.751 418.9697 Bmf0 BB171.873 418.9697 m171.873 414.1182 147.0059 410.1846 116.3311 410.1846 c85.6563 410.1846 60.7891 414.1182 60.7891 418.9697 c60.7891 423.8213 85.6563 427.7544 116.3311 427.7544 c147.0059 427.7544 171.873 423.8213 171.873 418.9697 cBb0 0 0 0 Bh1 (Unnamed gradient 31) 208.8213 -247.9541 -94.2792 64.7511 0.872045 0 0 0.137929 944.1812 6970.8882 Bg-4.21334 -8.90617 -56.3084 0.666414 116.3311 418.9697 Bmf0 BB561.7129 224.8203 m561.7129 219.9688 536.8457 216.0352 506.1709 216.0352 c475.4961 216.0352 450.6289 219.9688 450.6289 224.8203 c450.6289 229.6719 475.4961 233.6045 506.1709 233.6045 c536.8457 233.6045 561.7129 229.6719 561.7129 224.8203 cBb0 0 0 0 Bh1 (Unnamed gradient 31) 655.8633 -1655.5576 -94.2792 64.7498 0.872045 0 0 0.137929 944.1812 6970.8882 Bg-4.21326 -8.906 -56.3073 0.666402 506.1719 224.8193 Bmf0 BB373.7139 224.8203 m373.7139 219.9688 346.29 216.0352 312.4609 216.0352 c278.6328 216.0352 251.209 219.9688 251.209 224.8203 c251.209 229.6719 278.6328 233.6045 312.4609 233.6045 c346.29 233.6045 373.7139 229.6719 373.7139 224.8203 cBb0 0 0 0 Bh1 (Unnamed gradient 31) 427.1816 -1655.5576 -94.2792 64.7503 0.961702 0 0 0.137929 203.923 6970.8882 Bg-4.64647 -8.90607 -62.0969 0.666407 312.4609 224.8193 Bmf0 BB171.873 224.8203 m171.873 219.9688 147.0059 216.0352 116.3311 216.0352 c85.6563 216.0352 60.7891 219.9688 60.7891 224.8203 c60.7891 229.6719 85.6563 233.6045 116.3311 233.6045 c147.0059 233.6045 171.873 229.6719 171.873 224.8203 cBb0 0 0 0 Bh1 (Unnamed gradient 31) 208.8213 -1655.5576 -94.2792 64.7501 0.872045 0 0 0.137929 944.1812 6970.8882 Bg-4.21327 -8.90604 -56.3075 0.666404 116.3311 224.8193 Bmf0 BBLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF